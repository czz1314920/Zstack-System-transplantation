///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        06/Dec/2018  23:58:45 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\Sourc /
//                          e\DongheAppCooder.c                               /
//    Command line       =  -f C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg       /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg      /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\1314\Desktop\Zsta /
//                          ck系统移植\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\GenericApp\Source\DongheAppCooder.c -D     /
//                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D           /
//                          xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -lC          /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\CoordinatorEB\List\ -lA                       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\CoordinatorEB\List\ --diag_suppress           /
//                          Pe001,Pa010 -o C:\Users\1314\Desktop\Zstack系统移 /
//                          植\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G /
//                          enericApp\CC2530DB\CoordinatorEB\Obj\ -e          /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\ -I C:\Users\1314\Desktop\Zstack系统移植\ZSta /
//                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericA /
//                          pp\CC2530DB\..\Source\ -I                         /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\ZMain\TI2530DB\ -I                   /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\hal\include\ -I     /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\hal\target\CC2530EB /
//                          \ -I C:\Users\1314\Desktop\Zstack系统移植\ZStack- /
//                          CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mac\include\   /
//                          -I C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\high_level\  /
//                          -I C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\low_level\sr /
//                          f04\ -I C:\Users\1314\Desktop\Zstack系统移植\ZSta /
//                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericA /
//                          pp\CC2530DB\..\..\..\..\..\Components\mac\low_lev /
//                          el\srf04\single_chip\ -I                          /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\mt\ -I              /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\osal\include\ -I    /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\services\saddr\ -I  /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\services\sdata\ -I  /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\af\ -I        /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\nwk\ -I       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sapi\ -I      /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sec\ -I       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sys\ -I       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\zdo\ -I       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\zmac\ -I            /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz      /
//                          --require_prototypes                              /
//    List file          =  C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\CoordinatorEB\List\DongheAppCooder.s51        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME DongheAppCooder

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??DhAppCooderManage_HandleKeys?relay
        FUNCTION ??DhAppCooderManage_HandleKeys?relay,0203H
        PUBLIC ??DhAppCooderManage_ProcessMSGData?relay
        FUNCTION ??DhAppCooderManage_ProcessMSGData?relay,0203H
        PUBLIC ??DhAppCooderManage_ProcessZDOStateChange?relay
        FUNCTION ??DhAppCooderManage_ProcessZDOStateChange?relay,0203H
        PUBLIC ??DongheAppCooder_Init?relay
        FUNCTION ??DongheAppCooder_Init?relay,0203H
        PUBLIC ??DongheAppCooder_ProcessEvent?relay
        FUNCTION ??DongheAppCooder_ProcessEvent?relay,0203H
        FUNCTION ??InitUart?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??SampleApp_SerialCMD?relay
        FUNCTION ??SampleApp_SerialCMD?relay,0203H
        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC DhAppCooderManage_HandleKeys
        FUNCTION DhAppCooderManage_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC DhAppCooderManage_NwkState
        PUBLIC DhAppCooderManage_ProcessMSGData
        FUNCTION DhAppCooderManage_ProcessMSGData,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC DhAppCooderManage_ProcessZDOStateChange
        FUNCTION DhAppCooderManage_ProcessZDOStateChange,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC DhAppCooderManage_TaskID
        PUBLIC DhAppCooderManage_TransID
        PUBLIC DongheAppCooder_Init
        FUNCTION DongheAppCooder_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC DongheAppCooder_ProcessEvent
        FUNCTION DongheAppCooder_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION InitUart,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC MySendtest_INClusterList
        PUBLIC MySendtest_OUTClusterList
        PUBLIC MySendtest_Periodic_DstAddr
        PUBLIC MySendtest_SimpleDesc
        PUBLIC MySendtest_epDesc
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SerialCMD
        FUNCTION SampleApp_SerialCMD,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 28, STACK
        FUNCTION SerialApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalUARTRead         SYMBOL "HalUARTRead"
HalUARTOpen         SYMBOL "HalUARTOpen"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
HalLedSet           SYMBOL "HalLedSet"
HalLedBlink         SYMBOL "HalLedBlink"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
DhAppCooderManage_HandleKeys SYMBOL "DhAppCooderManage_HandleKeys"
??DhAppCooderManage_HandleKeys?relay SYMBOL "?relay", DhAppCooderManage_HandleKeys
DhAppCooderManage_ProcessMSGData SYMBOL "DhAppCooderManage_ProcessMSGData"
??DhAppCooderManage_ProcessMSGData?relay SYMBOL "?relay", DhAppCooderManage_ProcessMSGData
DhAppCooderManage_ProcessZDOStateChange SYMBOL "DhAppCooderManage_ProcessZDOStateChange"
??DhAppCooderManage_ProcessZDOStateChange?relay SYMBOL "?relay", DhAppCooderManage_ProcessZDOStateChange
DongheAppCooder_Init SYMBOL "DongheAppCooder_Init"
??DongheAppCooder_Init?relay SYMBOL "?relay", DongheAppCooder_Init
DongheAppCooder_ProcessEvent SYMBOL "DongheAppCooder_ProcessEvent"
??DongheAppCooder_ProcessEvent?relay SYMBOL "?relay", DongheAppCooder_ProcessEvent
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
SampleApp_SerialCMD SYMBOL "SampleApp_SerialCMD"
??SampleApp_SerialCMD?relay SYMBOL "?relay", SampleApp_SerialCMD

        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\Source\DongheAppCooder.c
//    1 
//    2 #include <string.h>
//    3 #include "DongheApp.h"
//    4 #include "OSAL_DongheCooder.h"
//    5 #include "hal_lcd.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    6 #include "hal_led.h"
//    7 #include "hal_key.h"
//    8 #include "hal_uart.h"
//    9 #include "OnBoard.h"
//   10 #include "OSAL.h"
//   11 #include "AF.h"
//   12 #include "ZDApp.h"
//   13 #include "ZDObject.h"
//   14 #include "ZDProfile.h"
//   15 #include "MT.h"
//   16 #include "mt_uart.h"
//   17 
//   18 #define GENERICAPP_EVT 0x0001
//   19 
//   20 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   21 byte DhAppCooderManage_TaskID;   // Task ID for internal task/event processing
DhAppCooderManage_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   22                           // This variable will be received when
//   23                           // DhAppCooderManage_Init() is called.

        RSEG XDATA_I:XDATA:NOROOT(0)
//   24 devStates_t DhAppCooderManage_NwkState=DEV_INIT;
DhAppCooderManage_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for DhAppCooderManage_NwkState>`
        REQUIRE __INIT_XDATA_I
//   25 
//   26 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   27 byte DhAppCooderManage_TransID=0;  // This is the unique message ID (counter)
DhAppCooderManage_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   28 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   29 afAddrType_t MySendtest_Periodic_DstAddr;
MySendtest_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   30 #define SERIAL_APP_PORT          0

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   31 endPointDesc_t  MySendtest_epDesc;
MySendtest_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   32 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   33 uint8 SampleAppPeriodicCounter = 'z';
SampleAppPeriodicCounter:
        DATA8
        DS 1
        REQUIRE `?<Initializer for SampleAppPeriodicCounter>`
        REQUIRE __INIT_XDATA_I
//   34 
//   35 
//   36 /*********************************************************************
//   37  * LOCAL FUNCTIONS
//   38  */
//   39 void DhAppCooderManage_ProcessZDOStateChange( void );
//   40 void DhAppCooderManage_ProcessMSGData( afIncomingMSGPacket_t *msg );
//   41 void DhAppCooderManage_HandleKeys(byte keys );
//   42 void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
//   43 void SampleApp_SendPeriodicMessage( void );
//   44 
//   45 /*********************************************************************
//   46  * NETWORK LAYER CALLBACKS
//   47  */
//   48 
//   49 /*********************************************************************
//   50  * PUBLIC FUNCTIONS
//   51  */
//   52 
//   53 /*********************************************************************
//   54  * @fn      DhAppCooderManage_Init
//   55  *
//   56  * @brief   Initialization function for the Generic App Task.
//   57  *          This is called during initialization and should contain
//   58  *          any application specific initialization (ie. hardware
//   59  *          initialization/setup, table initialization, power up
//   60  *          notificaiton ... ).
//   61  *
//   62  * @param   task_id - the ID assigned by OSAL.  This ID should be
//   63  *                    used to send messages and set timers.
//   64  *
//   65  * @return  none
//   66  */
//   67 
//   68 
//   69 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   70 const uint16 MySendtest_OUTClusterList[MySendtest_MAX_OUTCLUSTERS]=
MySendtest_OUTClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
//   71 {
//   72   MySendtest_PERIODIC_CLUSTERID,
//   73   MySendtest_GUANG_CLUSTERID,
//   74   MySendtest_WENDU_CLUSTERID,
//   75   MySendtest_SHIDU_CLUSTERID
//   76 };
//   77 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   78 const uint16 MySendtest_INClusterList[MySendtest_MAX_INCLUSTERS]=
MySendtest_INClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
//   79 {
//   80   MySendtest_SINGLE_CLUSTERID,
//   81   MySendtest_REGUANG_CLUSTERID,
//   82   MySendtest_REWENDU_CLUSTERID,
//   83   MySendtest_RESHIDU_CLUSTERID
//   84 };
//   85 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   86 const SimpleDescriptionFormat_t MySendtest_SimpleDesc=
MySendtest_SimpleDesc:
        DB 16
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW MySendtest_INClusterList
        DATA8
        DB 4
        DATA16
        DW MySendtest_OUTClusterList
//   87 {
//   88   MySendtest_ENDPOINT,
//   89   MySendtest_PROFID,
//   90   MySendtest_DEVICEID,
//   91   MySendtest_DEVICE_VERSION,
//   92   MySendtest_FLAGS,
//   93   MySendtest_MAX_INCLUSTERS,
//   94   (uint16*)MySendtest_INClusterList,
//   95   MySendtest_MAX_OUTCLUSTERS,
//   96   (uint16*)MySendtest_OUTClusterList
//   97 };
//   98 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   99 static void SerialApp_CallBack(uint8 port,uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  100 {
        FUNCALL SerialApp_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
//  101   uint8 sBuf[10]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  102   uint16 nLen=0;
//  103 
//  104   if(event != HAL_UART_TX_EMPTY)
        MOV     A,#0x10
        XRL     A,R6
        JZ      ??SerialApp_CallBack_0
//  105   {
//  106     nLen = HalUARTRead(SERIAL_APP_PORT,sBuf,10);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
//  107     if(nLen>0)
//  108     {
//  109     }
//  110   }
//  111 }
??SerialApp_CallBack_0:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  112 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  113 static void InitUart(void)
InitUart:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function InitUart
        CODE
//  114 {
        FUNCALL InitUart, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  115   halUARTCfg_t uartConfig;
//  116   uartConfig.configured            = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  117   uartConfig.baudRate              = HAL_UART_BR_57600;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  118   uartConfig.flowControl           = FALSE;
        DEC     A
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  119   uartConfig.flowControlThreshold  = 64;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  120   uartConfig.rx.maxBufSize         = 128;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  121   uartConfig.tx.maxBufSize         = 128;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  122   uartConfig.idleTimeout          = 6;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  123   uartConfig.intEnable             = TRUE;
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  124   uartConfig.callBackFunc          = SerialApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??SerialApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  125 
//  126   HalUARTOpen(SERIAL_APP_PORT,&uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  127 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//  128 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  129 void DongheAppCooder_Init( uint8 task_id )
DongheAppCooder_Init:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function DongheAppCooder_Init
        CODE
//  130 {
        FUNCALL DongheAppCooder_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_Init, InitUart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  131   DhAppCooderManage_TaskID = task_id;
        MOV     DPTR,#DhAppCooderManage_TaskID
        MOVX    @DPTR,A
//  132   MySendtest_Periodic_DstAddr.addrMode=afAddrBroadcast;
        MOV     DPTR,#MySendtest_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  133   MySendtest_Periodic_DstAddr.endPoint=MySendtest_ENDPOINT;
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  134   MySendtest_Periodic_DstAddr.addr.shortAddr=0xffff;
        MOV     DPTR,#MySendtest_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  135 
//  136 
//  137   //DhAppCooderManage_TransID = 0;
//  138   MySendtest_epDesc.endPoint=MySendtest_ENDPOINT;
        MOV     DPTR,#MySendtest_epDesc
        MOV     A,#0x10
        MOVX    @DPTR,A
//  139   MySendtest_epDesc.task_id=&DhAppCooderManage_TaskID;
        INC     DPTR
        MOV     A,#DhAppCooderManage_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(DhAppCooderManage_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  140   MySendtest_epDesc.simpleDesc=(SimpleDescriptionFormat_t *)&MySendtest_SimpleDesc ;
        INC     DPTR
        MOV     A,#MySendtest_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(MySendtest_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  141   MySendtest_epDesc.latencyReq=noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  142 
//  143 
//  144   afRegister(&MySendtest_epDesc);
        ; Setup parameters for call to function afRegister
        MOV     R2,#MySendtest_epDesc & 0xff
        MOV     R3,#(MySendtest_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  145   RegisterForKeys(DhAppCooderManage_TaskID);
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#DhAppCooderManage_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  146 
//  147   InitUart();
        ; Setup parameters for call to function InitUart
        LCALL   ??InitUart?relay
//  148   MT_UartRegisterTaskID(task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  149   HalUARTWrite(0,"Hello Wrold!",12);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hello Wrold!">` & 0xff
        MOV     R3,#(`?<Constant "Hello Wrold!">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  150 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock4
//  151 
//  152 /*********************************************************************
//  153  * @fn      DhAppCooderManage_ProcessEvent
//  154  *
//  155  * @brief   Generic Application Task event processor.  This function
//  156  *          is called to process all events for the task.  Events
//  157  *          include timers, messages and any other user defined events.
//  158  *
//  159  * @param   task_id  - The OSAL assigned task ID.
//  160  * @param   events - events to process.  This is a bit map and can
//  161  *                   contain more than one event.
//  162  *
//  163  * @return  none
//  164  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  165 uint16 DongheAppCooder_ProcessEvent( uint8 task_id, uint16 events )
DongheAppCooder_ProcessEvent:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function DongheAppCooder_ProcessEvent
        CODE
//  166 {
        FUNCALL DongheAppCooder_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_ProcessEvent, SampleApp_SerialCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_ProcessEvent, DhAppCooderManage_ProcessMSGData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_ProcessEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppCooder_ProcessEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  167   afIncomingMSGPacket_t *MSGpkt; //afIncomingMSGPacket_t
//  168   //afDataConfirm_t *afDataConfirm;
//  169 
//  170   // Data Confirmation message fields
//  171   //byte sentEP;
//  172   //ZStatus_t sentStatus;
//  173   //byte sentTransID;       // This should match the value sent
//  174   (void)task_id;  // Intentionally unreferenced parameter
//  175 
//  176   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??DongheAppCooder_ProcessEvent_0
//  177   {
//  178     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( DhAppCooderManage_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??DongheAppCooder_ProcessEvent_1
//  179     while ( MSGpkt )
//  180     {
//  181       switch ( MSGpkt->hdr.event )
//  182       {
//  183         case KEY_CHANGE:
//  184           DhAppCooderManage_HandleKeys(((keyChange_t *)MSGpkt)->keys );
//  185           break;
//  186 
//  187         case AF_INCOMING_MSG_CMD:
//  188           DhAppCooderManage_ProcessMSGData(MSGpkt);
//  189           break;
//  190 
//  191         case ZDO_STATE_CHANGE:
//  192           DhAppCooderManage_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  193           if (DhAppCooderManage_NwkState == DEV_ZB_COORD)
//  194           {
//  195             HalLedSet (HAL_LED_1, HAL_LED_MODE_OFF);
//  196             HalLedBlink(HAL_LED_2,5,50,1000);
//  197 
//  198             //DhAppCooderManage_ProcessZDOStateChange();
//  199           }
//  200           break;
//  201 
//  202          case CMD_SERIAL_MSG:
//  203              SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
??DongheAppCooder_ProcessEvent_2:
        ; Setup parameters for call to function SampleApp_SerialCMD
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_SerialCMD?relay
//  204              break;
//  205 
//  206         default:
//  207           break;
//  208       }
//  209 
//  210       // Release the memory
//  211       osal_msg_deallocate( (uint8 *)MSGpkt );
??DongheAppCooder_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  212 
//  213       // Next
//  214       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( DhAppCooderManage_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??DongheAppCooder_ProcessEvent_1:
        MOV     DPTR,#DhAppCooderManage_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??DongheAppCooder_ProcessEvent_4
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        DEC     A
        JZ      ??DongheAppCooder_ProcessEvent_2
        ADD     A,#-0x19
        JZ      ??DongheAppCooder_ProcessEvent_5
        ADD     A,#0x49
        JZ      ??DongheAppCooder_ProcessEvent_6
        SJMP    ??DongheAppCooder_ProcessEvent_3
??DongheAppCooder_ProcessEvent_5:
        ; Setup parameters for call to function DhAppCooderManage_ProcessMSGData
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??DhAppCooderManage_ProcessMSGData?relay
        SJMP    ??DongheAppCooder_ProcessEvent_3
??DongheAppCooder_ProcessEvent_6:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#DhAppCooderManage_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JNZ     ??DongheAppCooder_ProcessEvent_3
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine5 & 0xFFFF
//  215     }
??CrossCallReturnLabel_2:
        LCALL   ??HalLedBlink?relay
        SJMP    ??DongheAppCooder_ProcessEvent_3
//  216 
//  217     // return unprocessed events
//  218     return (events ^ SYS_EVENT_MSG);
??DongheAppCooder_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??DongheAppCooder_ProcessEvent_7:
        MOV     R3,A
        SJMP    ??DongheAppCooder_ProcessEvent_8
//  219   }
//  220 
//  221   if(events & GENERICAPP_EVT)
??DongheAppCooder_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??DongheAppCooder_ProcessEvent_9
//  222   {
//  223     HalLedBlink (HAL_LED_1,5,50,1000);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x32
        MOV     R2,#0x5
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  224     return (events ^ GENERICAPP_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??DongheAppCooder_ProcessEvent_7
//  225   }
//  226 
//  227   return 0;
??DongheAppCooder_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock5
??DongheAppCooder_ProcessEvent_8:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  228 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  229 
//  230 /*********************************************************************
//  231  * Event Generation Functions
//  232  */
//  233 
//  234 /*********************************************************************
//  235  * @fn      DhAppCooderManage_ProcessZDOMsgs()
//  236  *
//  237  * @brief   Process response messages
//  238  *
//  239  * @param   none
//  240  *
//  241  * @return  none
//  242  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  243 void DhAppCooderManage_ProcessZDOStateChange()
DhAppCooderManage_ProcessZDOStateChange:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function DhAppCooderManage_ProcessZDOStateChange
        CODE
//  244 {
        FUNCALL DhAppCooderManage_ProcessZDOStateChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppCooderManage_ProcessZDOStateChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppCooderManage_ProcessZDOStateChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppCooderManage_ProcessZDOStateChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  245   HalLedBlink (HAL_LED_ALL,5,50,2000);
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R3,#0x32
        MOV     R2,#0x5
        MOV     R1,#0x3
        LCALL   ??HalLedBlink?relay
//  246   osal_start_timerEx(DhAppCooderManage_TaskID,GENERICAPP_EVT,5000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#DhAppCooderManage_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  247   HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  248   HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  249 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock7
//  250 
//  251 
//  252 
//  253 /*********************************************************************
//  254  * @fn      DhAppCooderManage_HandleKeys
//  255  *
//  256  * @brief   Handles all key events for this device.
//  257  *
//  258  * @param   shift - true if in shift/alt.
//  259  * @param   keys - bit field for key events. Valid entries:
//  260  *                 HAL_KEY_SW_4
//  261  *                 HAL_KEY_SW_3
//  262  *                 HAL_KEY_SW_2
//  263  *                 HAL_KEY_SW_1
//  264  *
//  265  * @return  none
//  266  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  267 void DhAppCooderManage_HandleKeys(uint8 keys )
DhAppCooderManage_HandleKeys:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function DhAppCooderManage_HandleKeys
        CODE
//  268 {
        ; Saved register size: 0
        ; Auto size: 0
//  269 
//  270   // Shift is used to make each button/switch dual purpose.
//  271     if ( keys & HAL_KEY_SW_1 )
//  272     {
//  273     }
//  274 
//  275     if ( keys & HAL_KEY_SW_2 )
//  276     {
//  277     }
//  278 
//  279     if ( keys & HAL_KEY_SW_3 )
//  280     {
//  281     }
//  282 
//  283     if ( keys & HAL_KEY_SW_4 )
//  284     {
//  285     }
//  286     if ( keys & HAL_KEY_SW_5 )
//  287     {
//  288     }
//  289     if ( keys & HAL_KEY_SW_6 )
//  290     {
//  291     }
//  292 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
//  293 
//  294 
//  295 /************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  296 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  297 {                  //MySendtest_REWENDU_CLUSTERID协调器的
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  298   if ( AF_DataRequest( &MySendtest_Periodic_DstAddr, &MySendtest_epDesc,
//  299                        MySendtest_PERIODIC_CLUSTERID,
//  300                        1,
//  301                        (uint8*)&SampleAppPeriodicCounter,
//  302                        &DhAppCooderManage_TransID,
//  303                        AF_DISCV_ROUTE,
//  304                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#DhAppCooderManage_TransID & 0xff
        MOV     ?V0 + 1,#(DhAppCooderManage_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
        MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#MySendtest_epDesc & 0xff
        MOV     R5,#(MySendtest_epDesc >> 8) & 0xff
        MOV     R2,#MySendtest_Periodic_DstAddr & 0xff
        MOV     R3,#(MySendtest_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock9
//  305   {
//  306   }
//  307   else
//  308   {
//  309     // Error occurred in request to send.
//  310   }
//  311 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  312 void DhAppCooderManage_ProcessMSGData( afIncomingMSGPacket_t *msg )
DhAppCooderManage_ProcessMSGData:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function DhAppCooderManage_ProcessMSGData
        CODE
//  313 {   //接受路由器数据上去服务器
        FUNCALL DhAppCooderManage_ProcessMSGData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppCooderManage_ProcessMSGData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppCooderManage_ProcessMSGData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppCooderManage_ProcessMSGData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  314   switch ( msg->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for DhAppCooderManage_ProcessMSGDa_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??DhAppCooderManage_ProcessMSGData_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??DhAppCooderManage_ProcessMSGData_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??DhAppCooderManage_ProcessMSGData_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??DhAppCooderManage_ProcessMSGData_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??DhAppCooderManage_ProcessMSGData_1
        CODE
//  315   {
//  316     case MySendtest_REWENDU_CLUSTERID:
//  317       HalUARTWrite(0,"12\r\n",4);
??DhAppCooderManage_ProcessMSGData_2:
        MOV     ?V0 + 0,#`?<Constant "12\\r\\n">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "12\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  318       HalUARTWrite(0,msg->cmd.Data,msg->cmd.DataLength);
        ; Setup parameters for call to function HalUARTWrite
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  319       HalUARTWrite(0,"12\r\n",4);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    ??CrossCallReturnLabel_1
//  320       break;
//  321 
//  322     case MySendtest_SINGLE_CLUSTERID:
//  323       HalUARTWrite(0,msg->cmd.Data,msg->cmd.DataLength);
??DhAppCooderManage_ProcessMSGData_1:
        ; Setup parameters for call to function HalUARTWrite
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  324       break;
//  325 
//  326     case MySendtest_REGUANG_CLUSTERID:
//  327       HalUARTWrite(0,msg->cmd.Data,msg->cmd.DataLength);
//  328       break;
//  329 
//  330     case MySendtest_RESHIDU_CLUSTERID:
//  331       HalUARTWrite(0,msg->cmd.Data,msg->cmd.DataLength);
//  332       break;
//  333 
//  334     default:
//  335       break;
//  336   }
//  337 }
??DhAppCooderManage_ProcessMSGData_0:
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
//  338 /************************************************************************************************/
//  339 
//  340 //接受来自服务器的数据

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  341 void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
SampleApp_SerialCMD:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function SampleApp_SerialCMD
        CODE
//  342 {
        FUNCALL SampleApp_SerialCMD, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  343   uint8 i,len,*str=NULL; //len 有用数据长度
//  344 /********************************************************************/
//  345   unsigned char seg7table[16] = {
//  346     /* 0       1       2       3       4       5       6      7*/
//  347     0xc0,   0xf9,   0xa4,   0xb0,   0x99,   0x92,   0x82,   0xf8,
//  348     /* 8       9      A        B       C       D       E      F*/
//  349     0x80,   0x90,   0x88,   0x83,   0xc6,   0xa1,   0x86,   0x8e };
        MOV     DPTR,#`?<Constant {192, 249, 164, 176, 153, 146, 130,`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {192, 249, 164, 176, 153, 146, 130,` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  350     //P0DIR
//  351   P0DIR |= 0x10;
        ORL     0xfd,#0x10
//  352   P1DIR = 0xff;
        MOV     0xfe,#-0x1
//  353   P0 |= (0x1<<4);
        SETB    0x80.4
//  354   /********************************************************************/
//  355 
//  356 
//  357     str=cmdMsg->msg; //指向数据开头
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  358     len=*str; //msg 里的第 1 个字节代表后面的数据长度
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R7,A
//  359 /********打印出串口接收到的数据，用于提示*********/
//  360     for(i=1;i<=len;i++)
        MOV     R6,#0x1
        SJMP    ??SampleApp_SerialCMD_0
//  361     {
//  362 
//  363        if('0'<=*(str+i)&&*(str+i)<='9')
//  364        {
//  365          P1=seg7table[*(str+i)-'0'];
//  366          HalUARTWrite(0,str+i,1 );
//  367          HalLedSet (HAL_LED_2, HAL_LED_MODE_OFF);
//  368          HalLedBlink(HAL_LED_1,5,50,1000);
//  369        }
//  370        else if('A'<=*(str+i)&&*(str+i)<='F' || 'a'<=*(str+i)&&*(str+i)<='f')
//  371        {
//  372          if('A'<=*(str+i)&&*(str+i)<='F')
//  373           P1=seg7table[*(str+i)-'A'+10];
//  374          else
//  375            P1=seg7table[*(str+i)-'a'+10];
//  376          HalUARTWrite(0,str+i,1 );
//  377          HalLedSet (HAL_LED_1, HAL_LED_MODE_OFF);
//  378          HalLedBlink(HAL_LED_2,5,50,1000);
//  379        }
//  380        else
//  381        {
//  382          HalUARTWrite(0,"error",5);
??SampleApp_SerialCMD_1:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "error">` & 0xff
        MOV     R3,#(`?<Constant "error">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  383          P1=0xFF;
        MOV     0x90,#-0x1
//  384        }
??SampleApp_SerialCMD_2:
        INC     R6
??SampleApp_SerialCMD_0:
        MOV     A,R7
        CLR     C
        SUBB    A,R6
        JC      ??SampleApp_SerialCMD_3
        MOV     ?V0 + 2,R6
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0x30
        CLR     C
        SUBB    A,#0xa
        JNC     ??SampleApp_SerialCMD_4
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        ADD     A,#-0x30
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     R1,#0x1
??SampleApp_SerialCMD_5:
        LCALL   ??HalLedBlink?relay
        SJMP    ??SampleApp_SerialCMD_2
??SampleApp_SerialCMD_4:
        MOVX    A,@DPTR
        ADD     A,#-0x41
        CLR     C
        SUBB    A,#0x6
        JC      ??SampleApp_SerialCMD_6
        MOVX    A,@DPTR
        ADD     A,#-0x61
        CLR     C
        SUBB    A,#0x6
        JNC     ??SampleApp_SerialCMD_1
??SampleApp_SerialCMD_6:
        MOVX    A,@DPTR
        ADD     A,#-0x41
        CLR     C
        SUBB    A,#0x6
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        JNC     ??SampleApp_SerialCMD_7
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        ADD     A,#-0x37
        SJMP    ??SampleApp_SerialCMD_8
??SampleApp_SerialCMD_7:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        ADD     A,#-0x57
??SampleApp_SerialCMD_8:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine5 & 0xFFFF
//  385     }
??CrossCallReturnLabel_3:
        SJMP    ??SampleApp_SerialCMD_5
//  386     //HalUARTWrite(0,"\n",1 );//换行
//  387 
//  388 
//  389     P0DIR &= ~(0x10);
??SampleApp_SerialCMD_3:
        ANL     0xfd,#0xef
//  390     P0 &= ~(0x1<<4);
        CLR     0x80.4
//  391     /*uint8 i,len,*str=NULL;
//  392     str=cmdMsg->msg;
//  393     len=*str;
//  394     HalUARTWrite(0,str+1,1);
//  395     if(len>=1){
//  396       HalUARTWrite(0,str+1,1);
//  397       switch(*(str+1))
//  398       {
//  399       case '0':
//  400         SampleAppPeriodicCounter='0';
//  401         SampleApp_SendPeriodicMessage();
//  402         break;
//  403       case '1':
//  404         SampleAppPeriodicCounter='1';
//  405         SampleApp_SendPeriodicMessage();
//  406         break;
//  407       case '2':
//  408         SampleAppPeriodicCounter='2';
//  409         SampleApp_SendPeriodicMessage();
//  410         break;
//  411       case '3':
//  412         SampleAppPeriodicCounter='3';
//  413         SampleApp_SendPeriodicMessage();
//  414         break;
//  415       default:
//  416         break;
//  417       }
//  418     }  */
//  419 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock15
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE _A_P0
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0x90,A
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     R1,#0x2
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_2
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_3
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedBlink
        ; Setup parameters for call to function HalLedBlink
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x32
        MOV     R2,#0x5
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for DhAppCooderManage_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SampleAppPeriodicCounter>`:
        DATA8
        DB 122

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitUart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitUart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DongheAppCooder_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DongheAppCooder_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DongheAppCooder_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DongheAppCooder_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DhAppCooderManage_ProcessZDOStateChange?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DhAppCooderManage_ProcessZDOStateChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DhAppCooderManage_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DhAppCooderManage_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DhAppCooderManage_ProcessMSGData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DhAppCooderManage_ProcessMSGData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SerialCMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SerialCMD

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello Wrold!">`:
        DB "Hello Wrold!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "12\\r\\n">`:
        DB "12\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {192, 249, 164, 176, 153, 146, 130,`:
        DB 192
        DB 249
        DB 164
        DB 176
        DB 153
        DB 146
        DB 130
        DB 248
        DB 128
        DB 144
        DB 136
        DB 131
        DB 198
        DB 161
        DB 134
        DB 142

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "error">`:
        DB "error"

        END
// 
// 940 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//   4 bytes in segment SFR_AN
//   2 bytes in segment XDATA_I
//   2 bytes in segment XDATA_ID
//  78 bytes in segment XDATA_ROM_C
//  20 bytes in segment XDATA_Z
// 
// 996 bytes of CODE  memory
//  78 bytes of CONST memory
//   0 bytes of DATA  memory (+ 4 bytes shared)
//  22 bytes of XDATA memory
//
//Errors: none
//Warnings: none
