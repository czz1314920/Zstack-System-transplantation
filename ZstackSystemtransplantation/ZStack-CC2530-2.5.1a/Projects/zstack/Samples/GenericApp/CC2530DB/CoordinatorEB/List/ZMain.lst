###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         06/Dec/2018  20:25:34 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Junior College\Zigbee development technology    #
#                          and Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\ZMain\TI2530DB\ZMain.c              #
#    Command line       =  -f "D:\Junior College\Zigbee development           #
#                          technology and Practice\Zstack系统移植\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "D:\Junior College\Zigbee development           #
#                          technology and Practice\Zstack系统移植\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"         #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "D:\Junior College\Zigbee   #
#                          development technology and                         #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\ZMain\TI2530DB\ZMain.c" -D ZTOOL_P1 -D  #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          xLCD_SUPPORTED=DEBUG -lC "D:\Junior                #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\Coordinator #
#                          EB\List\" -lA "D:\Junior College\Zigbee            #
#                          development technology and                         #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\Coordinator #
#                          EB\List\" --diag_suppress Pe001,Pa010 -o           #
#                          "D:\Junior College\Zigbee development technology   #
#                          and Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\Coordin #
#                          atorEB\Obj\" -e --no_code_motion --debug           #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Junior College\Zigbee  #
#                          development technology and                         #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\" -I        #
#                          "D:\Junior College\Zigbee development technology   #
#                          and Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\..\Sour #
#                          ce\" -I "D:\Junior College\Zigbee development      #
#                          technology and Practice\Zstack系统移植\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 #
#                          0DB\..\..\..\ZMain\TI2530DB\" -I "D:\Junior        #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\include\" -I "D:\Junior         #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\target\CC2530EB\" -I            #
#                          "D:\Junior College\Zigbee development technology   #
#                          and Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Junior     #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\high_level\" -I "D:\Junior      #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\" -I            #
#                          "D:\Junior College\Zigbee development technology   #
#                          and Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Junior College\Zigbee development        #
#                          technology and Practice\Zstack系统移植\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mt\" -I "D:\Junior   #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\osal\include\" -I "D:\Junior        #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\saddr\" -I "D:\Junior      #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\sdata\" -I "D:\Junior      #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\af\" -I "D:\Junior            #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\" -I "D:\Junior           #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sapi\" -I "D:\Junior          #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\" -I "D:\Junior           #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sys\" -I "D:\Junior           #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\zdo\" -I "D:\Junior           #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\" -I "D:\Junior                #
#                          College\Zigbee development technology and          #
#                          Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\f8w\" -Ohz                     #
#                          --require_prototypes                               #
#    List file          =  D:\Junior College\Zigbee development technology    #
#                          and Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\Coordin #
#                          atorEB\List\ZMain.lst                              #
#    Object file        =  D:\Junior College\Zigbee development technology    #
#                          and Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\Coordin #
#                          atorEB\Obj\ZMain.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Junior College\Zigbee development technology and Practice\Zstack系统移植\ZStack-CC2530-2.5.1a\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          #ifndef NONWK
      2          #include "AF.h"
      3          #endif
      4          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
      5          #include "hal_flash.h"
      6          #include "hal_lcd.h"
      7          #include "hal_led.h"
      8          #include "hal_drivers.h"
      9          #include "OnBoard.h"
     10          #include "OSAL.h"
     11          #include "OSAL_Nv.h"
     12          #include "ZComDef.h"
     13          #include "ZMAC.h"
     14          
     15          /*********************************************************************
     16           * LOCAL FUNCTIONS
     17           */
     18          
     19          
     20          static void zmain_ext_addr( void );
     21          #if defined ZCL_KEY_ESTABLISH
     22          static void zmain_cert_init( void );
     23          #endif
     24          static void zmain_dev_info( void );
     25          static void zmain_vdd_check( void );
     26          
     27          #ifdef LCD_SUPPORTED
     28          static void zmain_lcd_init( void );
     29          #endif
     30          
     31          /*********************************************************************
     32           * @fn      main
     33           * @brief   First function called after startup.
     34           * @return  don't care
     35           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     36          int main( void )
   \                     main:
     37          {
   \   000000                ; Auto size: 0
     38          
     39          
     40          
     41            // Turn off interrupts
     42            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??osal_int_disable?relay
     43          
     44            // Initialization for board related stuff such as LEDs
     45            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV     A,0x9e
   \   000025   70FC         JNZ     ??main_2
   \   000027   43BE04       ORL     0xbe,#0x4
   \   00002A   906270       MOV     DPTR,#0x6270
   \   00002D   7408         MOV     A,#0x8
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   D280         SETB    0x80.0
   \   000032   43FD01       ORL     0xfd,#0x1
   \   000035   D2A0         SETB    0xa0.0
   \   000037   43FF01       ORL     0xff,#0x1
   \   00003A   438F01       ORL     0x8f,#0x1
     46          
     47            // Make sure supply voltage is high enough to run
     48            zmain_vdd_check();
   \   00003D   7E10         MOV     R6,#0x10
   \                     ??main_3:
   \   00003F                ; Setup parameters for call to function HalAdcCheckVdd
   \   00003F   794A         MOV     R1,#0x4a
   \   000041   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000044   E9           MOV     A,R1
   \   000045   60F8         JZ      ??main_3
   \   000047   1E           DEC     R6
   \   000048   EE           MOV     A,R6
   \   000049   70F4         JNZ     ??main_3
     49          
     50            // Initialize board I/O
     51            InitBoard( OB_COLD );
   \   00004B                ; Setup parameters for call to function InitBoard
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   12....       LCALL   ??InitBoard?relay
     52            // Initialze HAL drivers
     53            HalDriverInit();                       //存在灯闪烁////////////////////////////////////////////////////////////可以
   \   000050                ; Setup parameters for call to function HalDriverInit
   \   000050   12....       LCALL   ??HalDriverInit?relay
     54            // Initialize NV System                                    ///////////////////////////////////////////////////不行
     55            osal_nv_init( NULL );                  //存在灯闪烁
   \   000053                ; Setup parameters for call to function osal_nv_init
   \   000053   7A00         MOV     R2,#0x0
   \   000055   7B00         MOV     R3,#0x0
   \   000057   12....       LCALL   ??osal_nv_init?relay
     56          
     57            // Initialize the MAC
     58            ZMacInit();
   \   00005A                ; Setup parameters for call to function ZMacInit
   \   00005A   12....       LCALL   ??ZMacInit?relay
     59          
     60            // Determine the extended address
     61            zmain_ext_addr();
   \   00005D                ; Setup parameters for call to function zmain_ext_addr
   \   00005D   12....       LCALL   ??zmain_ext_addr?relay
     62          
     63          #if defined ZCL_KEY_ESTABLISH
     64            // Initialize the Certicom certificate information.
     65            zmain_cert_init();
     66          #endif
     67          
     68            // Initialize basic NV items
     69            zgInit();
   \   000060                ; Setup parameters for call to function zgInit
   \   000060   12....       LCALL   ??zgInit?relay
     70          
     71          #ifndef NONWK
     72            // Since the AF isn't a task, call it's initialization routine
     73            afInit();
     74          #endif
     75          
     76            // Initialize the operating system
     77            osal_init_system();
   \   000063                ; Setup parameters for call to function osal_init_system
   \   000063   12....       LCALL   ??osal_init_system?relay
     78          
     79            // Allow interrupts
     80            osal_int_enable( INTS_ALL );
   \   000066                ; Setup parameters for call to function osal_int_enable
   \   000066   79FF         MOV     R1,#-0x1
   \   000068   12....       LCALL   ??osal_int_enable?relay
     81          
     82            // Final board initialization
     83            InitBoard( OB_READY );
   \   00006B                ; Setup parameters for call to function InitBoard
   \   00006B   7902         MOV     R1,#0x2
   \   00006D   12....       LCALL   ??InitBoard?relay
     84          
     85            // Display information about this device
     86            zmain_dev_info();
     87          
     88            /* Display the device info on the LCD */
     89          #ifdef LCD_SUPPORTED
     90            zmain_lcd_init();
     91          #endif
     92          
     93          #ifdef WDT_IN_PM1
     94            /* If WDT is used, this is a good place to enable it. */
     95            WatchDogEnable( WDTIMX );
     96          #endif
     97            osal_start_system(); // No Return from here
   \   000070                ; Setup parameters for call to function osal_start_system
   \   000070   12....       LCALL   ??osal_start_system?relay
     98          
     99            return 0;  // Shouldn't get here.
   \   000073   7A00         MOV     R2,#0x0
   \   000075   7B00         MOV     R3,#0x0
   \   000077   02....       LJMP    ?BRET
   \   00007A                REQUIRE SLEEPCMD
   \   00007A                REQUIRE SLEEPSTA
   \   00007A                REQUIRE CLKCONCMD
   \   00007A                REQUIRE CLKCONSTA
   \   00007A                REQUIRE _A_P0
   \   00007A                REQUIRE P0DIR
   \   00007A                REQUIRE _A_P2
   \   00007A                REQUIRE P2DIR
   \   00007A                REQUIRE P0INP
    100          } // main()
    101          
    102          /*********************************************************************
    103           * @fn      zmain_vdd_check
    104           * @brief   Check if the Vdd is OK to run the processor.
    105           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    106           *********************************************************************/
    107          static void zmain_vdd_check( void )
    108          {
    109            uint8 cnt = 16;
    110          
    111            do {
    112              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    113            } while (--cnt);
    114          }
    115          
    116          /**************************************************************************************************
    117           * @fn          zmain_ext_addr
    118           *
    119           * @brief       Execute a prioritized search for a valid extended address and write the results
    120           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    121           *
    122           * input parameters
    123           *
    124           * None.
    125           *
    126           * output parameters
    127           *
    128           * None.
    129           *
    130           * @return      None.
    131           **************************************************************************************************
    132           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    134          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    135            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    136            uint8 writeNV = TRUE;
    137          
    138            // First check whether a non-erased extended address exists in the OSAL NV.
    139            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    140                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    141                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F                ; Setup parameters for call to function osal_nv_item_init
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   F5..         MOV     ?V0 + 1,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C08         MOV     R4,#0x8
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   ??osal_nv_item_init?relay
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   7057         JNZ     ??zmain_ext_addr_0
   \   00003B                ; Setup parameters for call to function osal_nv_read
   \   00003B   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   00003E   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..08       MOV     ?V0 + 0,#0x8
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A01         MOV     R2,#0x1
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ??osal_nv_read?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   702E         JNZ     ??zmain_ext_addr_0
   \   000064                ; Setup parameters for call to function osal_memcmp
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   A982         MOV     R1,DPL
   \   00006C   AA83         MOV     R2,DPH
   \   00006E   89..         MOV     ?V0 + 0,R1
   \   000070   8A..         MOV     ?V0 + 1,R2
   \   000072   75..00       MOV     ?V0 + 2,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007A   7C08         MOV     R4,#0x8
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000080   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000082   7B00         MOV     R3,#0x0
   \   000084   12....       LCALL   ??osal_memcmp?relay
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    142            {
    143              // Attempt to read the extended address from the location on the lock bits page
    144              // where the programming tools know to reserve it.
    145              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000092                ; Setup parameters for call to function HalFlashRead
   \   000092   75..08       MOV     ?V0 + 0,#0x8
   \   000095   75..00       MOV     ?V0 + 1,#0x0
   \   000098   78..         MOV     R0,#?V0 + 0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   00009F   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   0000A1   7AE8         MOV     R2,#-0x18
   \   0000A3   7B07         MOV     R3,#0x7
   \   0000A5   797F         MOV     R1,#0x7f
   \   0000A7   12....       LCALL   ??HalFlashRead?relay
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    146          
    147              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AF                ; Setup parameters for call to function osal_memcmp
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   A982         MOV     R1,DPL
   \   0000B7   AA83         MOV     R2,DPH
   \   0000B9   89..         MOV     ?V0 + 0,R1
   \   0000BB   8A..         MOV     ?V0 + 1,R2
   \   0000BD   75..00       MOV     ?V0 + 2,#0x0
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   7C08         MOV     R4,#0x8
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000CB   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   12....       LCALL   ??osal_memcmp?relay
   \   0000D2   7403         MOV     A,#0x3
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   6035         JZ      ??zmain_ext_addr_2
    148              {
    149                // Attempt to read the extended address from the designated location in the Info Page.
    150                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000DA                ; Setup parameters for call to function osal_memcmp
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   790C         MOV     R1,#0xc
   \   0000E5   7A78         MOV     R2,#0x78
   \   0000E7   7B00         MOV     R3,#0x0
   \   0000E9   12....       LCALL   ??osal_memcmp?relay
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV     A,R1
   \   0000F2   7054         JNZ     ??zmain_ext_addr_3
    151                {
    152                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   75..0C       MOV     ?V0 + 0,#0xc
   \   0000F7   75..78       MOV     ?V0 + 1,#0x78
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FF   7C08         MOV     R4,#0x8
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000105   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000107   12....       LCALL   ??osal_memcpy?relay
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
    153                }
    154                else  // No valid extended address was found.
    155                {
    156                  uint8 idx;
    157          
    158          #if !defined ( NV_RESTORE )
    159                  writeNV = FALSE;  // Make this a temporary IEEE address
    160          #endif
    161          
    162                  /* Attempt to create a sufficiently random extended address for expediency.
    163                   * Note: this is only valid/legal in a test environment and
    164                   *       must never be used for a commercial product.
    165                   */
    166                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    167                  {
    168                    uint16 randy = osal_rand();
    169                    aExtendedAddress[idx++] = LO_UINT16(randy);
    170                    aExtendedAddress[idx++] = HI_UINT16(randy);
    171                  }
    172                  // Next-to-MSB identifies ZigBee devicetype.
    173          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    174                  aExtendedAddress[idx++] = 0x10;
    175          #elif ZG_BUILD_RTRONLY_TYPE
    176                  aExtendedAddress[idx++] = 0x20;
    177          #else
    178                  aExtendedAddress[idx++] = 0x30;
    179          #endif
    180                  // MSB has historical signficance.
    181                  aExtendedAddress[idx] = 0xF8;
    182                }
    183              }
    184          
    185              if (writeNV)
    186              {
    187                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   00010F                ; Setup parameters for call to function osal_nv_write
   \   00010F   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000112   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000115   78..         MOV     R0,#?V0 + 0
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   75..08       MOV     ?V0 + 0,#0x8
   \   00011D   75..00       MOV     ?V0 + 1,#0x0
   \   000120   78..         MOV     R0,#?V0 + 0
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   7C00         MOV     R4,#0x0
   \   000127   7D00         MOV     R5,#0x0
   \   000129   7A01         MOV     R2,#0x1
   \   00012B   7B00         MOV     R3,#0x0
   \   00012D   12....       LCALL   ??osal_nv_write?relay
   \   000130   7404         MOV     A,#0x4
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
    188              }
    189            }
    190          
    191            // Set the MAC PIB extended address according to results from above.
    192            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000135                ; Setup parameters for call to function ZMacSetReq
   \   000135   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000137   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000139   79E2         MOV     R1,#-0x1e
   \   00013B   12....       LCALL   ??ZMacSetReq?relay
    193          }
   \   00013E   7408         MOV     A,#0x8
   \   000140   12....       LCALL   ?DEALLOC_XSTACK8
   \   000143   7F03         MOV     R7,#0x3
   \   000145   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000148   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   00014A                ; Setup parameters for call to function osal_rand
   \   00014A   12....       LCALL   ??osal_rand?relay
   \   00014D   8A..         MOV     ?V0 + 0,R2
   \   00014F   A8..         MOV     R0,?V0 + 0
   \   000151   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000154   E8           MOV     A,R0
   \   000155   F0           MOVX    @DPTR,A
   \   000156   0E           INC     R6
   \   000157   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00015A   EB           MOV     A,R3
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   0E           INC     R6
   \   00015D   EE           MOV     A,R6
   \   00015E   C3           CLR     C
   \   00015F   9406         SUBB    A,#0x6
   \   000161   40E7         JC      ??zmain_ext_addr_4
   \   000163   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000166   7410         MOV     A,#0x10
   \   000168   F0           MOVX    @DPTR,A
   \   000169   7401         MOV     A,#0x1
   \   00016B   2E           ADD     A,R6
   \   00016C   F8           MOV     R0,A
   \   00016D   74..         MOV     A,#aExtendedAddress & 0xff
   \   00016F   28           ADD     A,R0
   \   000170   F582         MOV     DPL,A
   \   000172   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   000174   3400         ADDC    A,#0x0
   \   000176   F583         MOV     DPH,A
   \   000178   74F8         MOV     A,#-0x8
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   80B8         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8E..         MOV     ?V0 + 0,R6
   \   000002   74..         MOV     A,#aExtendedAddress & 0xff
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
    194          
    195          #if defined ZCL_KEY_ESTABLISH
    196          /**************************************************************************************************
    197           * @fn          zmain_cert_init
    198           *
    199           * @brief       Initialize the Certicom certificate information.
    200           *
    201           * input parameters
    202           *
    203           * None.
    204           *
    205           * output parameters
    206           *
    207           * None.
    208           *
    209           * @return      None.
    210           **************************************************************************************************
    211           */
    212          static void zmain_cert_init(void)
    213          {
    214            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    215            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    216              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    217              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    218              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    219              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    220              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    221              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    222            };
    223          
    224            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    225            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    226          
    227            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    228            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    229            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    230                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    231                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    232            {
    233              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    234              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    235                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    236              // If the certificate data is not NULL, use it to update the corresponding NV items.
    237              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    238              {
    239                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    240                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    241                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    242                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    243                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    244                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    245                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    246                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    247              }
    248            }
    249          }
    250          #endif
    251          
    252          /**************************************************************************************************
    253           * @fn          zmain_dev_info
    254           *
    255           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    256           *
    257           * input parameters
    258           *
    259           * None.
    260           *
    261           * output parameters
    262           *
    263           * None.
    264           *
    265           * @return      None.
    266           **************************************************************************************************
    267           */
    268          static void zmain_dev_info(void)
    269          {
    270          #ifdef LCD_SUPPORTED
    271            uint8 i;
    272            uint8 *xad;
    273            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    274          
    275            // Display the extended address.
    276            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    277          
    278            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    279            {
    280              uint8 ch;
    281              ch = (*xad >> 4) & 0x0F;
    282              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    283              ch = *xad & 0x0F;
    284              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    285            }
    286            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    287            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    288            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    289          #endif
    290          }
    291          
    292          #ifdef LCD_SUPPORTED
    293          /*********************************************************************
    294           * @fn      zmain_lcd_init
    295           * @brief   Initialize LCD at start up.
    296           * @return  none
    297           *********************************************************************/
    298          static void zmain_lcd_init ( void )
    299          {
    300          #ifdef SERIAL_DEBUG_SUPPORTED
    301            {
    302              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    303          
    304          #if defined( MT_MAC_FUNC )
    305          #if defined( ZDO_COORDINATOR )
    306                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    307          #else
    308                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    309          #endif // ZDO
    310          #elif defined( MT_NWK_FUNC )
    311          #if defined( ZDO_COORDINATOR )
    312                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    313          #else
    314                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    315          #endif // ZDO
    316          #endif // MT_FUNC
    317            }
    318          #endif // SERIAL_DEBUG_SUPPORTED
    319          }
    320          #endif

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     main                       0      0      0
       -> osal_int_disable      0      0      0
       -> HalAdcCheckVdd        0      0      0
       -> InitBoard             0      0      0
       -> HalDriverInit         0      0      0
       -> osal_nv_init          0      0      0
       -> ZMacInit              0      0      0
       -> zmain_ext_addr        0      0      0
       -> zgInit                0      0      0
       -> osal_init_system      0      0      0
       -> osal_int_enable       0      0      0
       -> InitBoard             0      0      0
       -> osal_start_system     0      0      0
     zmain_ext_addr             2      0     23
       -> osal_nv_item_init     0      0     42
       -> osal_nv_read          0      0     46
       -> osal_memcmp           0      0     44
       -> HalFlashRead          0      0     42
       -> osal_memcmp           0      0     44
       -> osal_memcmp           0      0     44
       -> osal_memcpy           0      0     44
       -> osal_nv_write         0      0     46
       -> ZMacSetReq            0      0     38
       -> osal_rand             0      0     38


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P0                                             1
     P0INP                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     _A_P2                                             1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P0DIR                                             1
     P2DIR                                             1
     main                                            122
     zmain_ext_addr                                  381
     ?Subroutine0                                     15
     ??main?relay                                      6
     ??zmain_ext_addr?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8

 
 518 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 530 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 9 bytes shared)

Errors: none
Warnings: none
