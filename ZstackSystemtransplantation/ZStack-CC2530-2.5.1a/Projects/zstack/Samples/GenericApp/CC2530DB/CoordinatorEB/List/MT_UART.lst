###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         06/Dec/2018  21:23:50 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Components\mt\MT_UART.c                    #
#    Command line       =  -f C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg         #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\1314\Desktop\Zstac #
#                          kœµÕ≥“∆÷≤\ZStack-CC2530-2.5.1a\Components\mt\MT_UA #
#                          RT.c -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D    #
#                          xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -lC           #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\CoordinatorEB\List\ -lA                          #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\CoordinatorEB\List\ --diag_suppress Pe001,Pa010  #
#                          -o C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp\CC25 #
#                          30DB\CoordinatorEB\Obj\ -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp\CC25 #
#                          30DB\ -I C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZSta #
#                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp #
#                          p\CC2530DB\..\Source\ -I                           #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\ZMain\TI2530DB\ -I                      #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\include\ -I        #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\   #
#                          -I C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\include\ -I     #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\high_level\ -I     #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\mac\low_level\srf04\   #
#                          -I C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \single_chip\ -I C:\Users\1314\Desktop\ZstackœµÕ≥“ #
#                          ∆÷≤\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp\CC2530DB\..\..\..\..\..\Components\mt\   #
#                          -I C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp\CC25 #
#                          30DB\..\..\..\..\..\Components\osal\include\ -I    #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\saddr\ -I     #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\services\sdata\ -I     #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\af\ -I           #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\nwk\ -I          #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sapi\ -I         #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sec\ -I          #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\sys\ -I          #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\ -I          #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\ -I               #
#                          C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz         #
#                          --require_prototypes                               #
#    List file          =  C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\CoordinatorEB\List\MT_UART.lst                   #
#    Object file        =  C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D #
#                          B\CoordinatorEB\Obj\MT_UART.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\1314\Desktop\ZstackœµÕ≥“∆÷≤\ZStack-CC2530-2.5.1a\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void MT_UartInit ()
   \                     MT_UartInit:
    100          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   000009   90....       MOV     DPTR,#App_TaskID
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7403         MOV     A,#0x3
   \   00001B   F0           MOVX    @DPTR,A
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001C   14           DEC     A
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7440         MOV     A,#0x40
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002D   740A         MOV     A,#0xa
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7480         MOV     A,#-0x80
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000038   7412         MOV     A,#0x12
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7480         MOV     A,#-0x80
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000043   7405         MOV     A,#0x5
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7406         MOV     A,#0x6
   \   00004A   F0           MOVX    @DPTR,A
    114            uartConfig.intEnable            = TRUE;
   \   00004B   7416         MOV     A,#0x16
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData;
   \   000053   741B         MOV     A,#0x1b
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   74..         MOV     A,#??MT_UartProcessZToolData?relay & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   74..         MOV     A,#(??MT_UartProcessZToolData?relay >> 8) & 0xff
   \   00005E   F0           MOVX    @DPTR,A
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   00005F                ; Setup parameters for call to function HalUARTOpen
   \   00005F   85..82       MOV     DPL,?XSP + 0
   \   000062   85..83       MOV     DPH,?XSP + 1
   \   000065   AA82         MOV     R2,DPL
   \   000067   AB83         MOV     R3,DPH
   \   000069   7900         MOV     R1,#0x0
   \   00006B   12....       LCALL   ??HalUARTOpen?relay
    126          #else
    127            /* Silence IAR compiler warning */
    128            (void)uartConfig;
    129          #endif
    130          
    131            /* Initialize for ZApp */
    132          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    133            /* Default max bytes that ZAPP can take */
    134            MT_UartMaxZAppBufLen  = 1;
    135            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    136          #endif
    137          
    138          }
   \   00006E   741D         MOV     A,#0x1d
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073                REQUIRE ?Subroutine0
   \   000073                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    139          
    140          /***************************************************************************************************
    141           * @fn      MT_SerialRegisterTaskID
    142           *
    143           * @brief   This function registers the taskID of the application so it knows
    144           *          where to send the messages whent they come in.
    145           *
    146           * @param   void
    147           *
    148           * @return  void
    149           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    151          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    152            App_TaskID = taskID;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#App_TaskID
   \   000008   F0           MOVX    @DPTR,A
    153          }
   \   000009   80..         SJMP    ?Subroutine0
    154          
    155          /***************************************************************************************************
    156           * @fn      SPIMgr_CalcFCS
    157           *
    158           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    159           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    160           *
    161           * @param   byte *msg_ptr - message pointer
    162           * @param   byte len - length (in bytes) of message
    163           *
    164           * @return  result byte
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    167          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    168            byte x;
    169            byte xorResult;
    170          
    171            xorResult = 0;
   \   000006   7900         MOV     R1,#0x0
    172          
    173            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV     R0,#0x0
   \   00000A   800E         SJMP    ??MT_UartCalcFCS_0
    174              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C9           XCH     A,R1
   \   000012   69           XRL     A,R1
   \   000013   F9           MOV     R1,A
   \   000014   08           INC     R0
   \   000015   A3           INC     DPTR
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV     A,R0
   \   00001B   C3           CLR     C
   \   00001C   9C           SUBB    A,R4
   \   00001D   40ED         JC      ??MT_UartCalcFCS_1
    175          
    176            return ( xorResult );
   \   00001F   80..         SJMP    ?Subroutine0
    177          }
    178          
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_UartProcessZToolData
    182           *
    183           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    184           *          |  1  |     1        |    2    |  0-Len   |   1   |
    185           *
    186           *          Parses the data and determine either is SPI or just simply serial data
    187           *          then send the data to correct place (MT or APP)
    188           *
    189           * @param   port     - UART port
    190           *          event    - Event that causes the callback
    191           *
    192           *
    193           * @return  None
    194           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    196          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    197            uint8 flag=0,i,j=0;   //flag «≈–∂œ”–√ª”– ’µΩ ˝æ›£¨jº«¬º ˝æ›≥§∂»
   \   00000C   75..00       MOV     ?V0 + 0,#0x0
   \   00000F   7F00         MOV     R7,#0x0
    198            uint8 buf[128];     //¥Æø⁄buffer◊Ó¥Ûª∫≥Âƒ¨»œ «128£¨Œ“√«’‚¿Ô”√128.
    199            (void)event;        // Intentionally unreferenced parameter
   \   000011   801F         SJMP    ??MT_UartProcessZToolData_0
    200          
    201            while (Hal_UART_RxBufLen(port)) //ºÏ≤‚¥Æø⁄ ˝æ› «∑ÒΩ” ’ÕÍ≥…
    202          
    203            {
    204              HalUARTRead (port,&buf[j], 1);  //∞— ˝æ›Ω” ’∑≈µΩbuf÷–
   \                     ??MT_UartProcessZToolData_1:
   \   000013                ; Setup parameters for call to function HalUARTRead
   \   000013   7C01         MOV     R4,#0x1
   \   000015   7D00         MOV     R5,#0x0
   \   000017   8F..         MOV     ?V0 + 0,R7
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   E582         MOV     A,DPL
   \   000021   25..         ADD     A,?V0 + 0
   \   000023   FA           MOV     R2,A
   \   000024   E583         MOV     A,DPH
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   EE           MOV     A,R6
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??HalUARTRead?relay
    205              j++;                           //º«¬º◊÷∑˚ ˝
   \   00002E   0F           INC     R7
    206              flag=1;                         //“—æ≠¥”¥Æø⁄Ω” ’µΩ–≈œ¢
   \   00002F   75..01       MOV     ?V0 + 0,#0x1
    207            }
   \                     ??MT_UartProcessZToolData_0:
   \   000032                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000032   EE           MOV     A,R6
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000037   8B..         MOV     ?V0 + 3,R3
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V0 + 3
   \   00003C   70D5         JNZ     ??MT_UartProcessZToolData_1
    208          
    209            if(flag==1)       //“—æ≠¥”¥Æø⁄Ω” ’µΩ–≈œ¢
   \   00003E   7401         MOV     A,#0x1
   \   000040   65..         XRL     A,?V0 + 0
   \   000042   6003         JZ      $+5
   \   000044   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    210          
    211            {     /* Allocate memory for the data */
    212          	    //∑÷≈‰ƒ⁄¥Êø’º‰£¨Œ™ª˙ππÃÂƒ⁄»›+ ˝æ›ƒ⁄»›+1∏ˆº«¬º≥§∂»µƒ ˝æ›
    213             pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof
    214                    ( mtOSALSerialData_t )+j+1);
   \   000047                ; Setup parameters for call to function osal_msg_allocate
   \   000047   8F..         MOV     ?V0 + 0,R7
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   2405         ADD     A,#0x5
   \   00004D   FA           MOV     R2,A
   \   00004E   E4           CLR     A
   \   00004F   3400         ADDC    A,#0x0
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   ??osal_msg_allocate?relay
   \   000055   90....       MOV     DPTR,#pMsg
   \   000058   EA           MOV     A,R2
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   EB           MOV     A,R3
   \   00005C   12....       LCALL   ?Subroutine1 & 0xFFFF
    215            // ¬º˛∫≈”√‘≠¿¥µƒCMD_SERIAL_MSG
    216            pMsg->hdr.event = CMD_SERIAL_MSG;
   \                     ??CrossCallReturnLabel_2:
   \   00005F   7401         MOV     A,#0x1
   \   000061   F0           MOVX    @DPTR,A
    217            pMsg->msg = (uint8*)(pMsg+1);  // ∞— ˝æ›∂®ŒªµΩΩ·ππÃÂ ˝æ›≤ø∑÷
   \   000062   90....       MOV     DPTR,#pMsg
   \   000065   E0           MOVX    A,@DPTR
   \   000066   2404         ADD     A,#0x4
   \   000068   F8           MOV     R0,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   3400         ADDC    A,#0x0
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000071   E8           MOV     A,R0
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E9           MOV     A,R1
   \   000075   12....       LCALL   ?Subroutine1 & 0xFFFF
    218            pMsg->msg [0]= j;              //∏¯…œ≤„µƒ ˝æ›µ⁄“ª∏ˆ «≥§∂»
   \                     ??CrossCallReturnLabel_3:
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00007D   EF           MOV     A,R7
   \   00007E   F0           MOVX    @DPTR,A
    219            for(i=0;i<j;i++)                //¥”µ⁄∂˛∏ˆø™ ºº«¬º ˝æ›
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   802B         SJMP    ??MT_UartProcessZToolData_3
    220            pMsg->msg [i+1]= buf[i];
   \                     ??MT_UartProcessZToolData_4:
   \   000083   8B82         MOV     DPL,R3
   \   000085   A882         MOV     R0,DPL
   \   000087   85..82       MOV     DPL,?XSP + 0
   \   00008A   85..83       MOV     DPH,?XSP + 1
   \   00008D   E582         MOV     A,DPL
   \   00008F   28           ADD     A,R0
   \   000090   F582         MOV     DPL,A
   \   000092   E583         MOV     A,DPH
   \   000094   3400         ADDC    A,#0x0
   \   000096   F583         MOV     DPH,A
   \   000098   E0           MOVX    A,@DPTR
   \   000099   C0E0         PUSH    A
   \   00009B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   28           ADD     A,R0
   \   0000A0   FA           MOV     R2,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   3400         ADDC    A,#0x0
   \   0000A5   8A82         MOV     DPL,R2
   \   0000A7   F583         MOV     DPH,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   D0E0         POP     A
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   0B           INC     R3
   \                     ??MT_UartProcessZToolData_3:
   \   0000AE   EB           MOV     A,R3
   \   0000AF   C3           CLR     C
   \   0000B0   9F           SUBB    A,R7
   \   0000B1   40D0         JC      ??MT_UartProcessZToolData_4
    221            osal_msg_send( App_TaskID, (byte *)pMsg ); //‘⁄µ⁄7≤Ω¿Ôµƒ”Ôæ‰MT_UartRegisterTaskID(task_id)÷–//App_TaskID±ª∏≥¡À”¶”√≤„µƒ»ŒŒÒ∫≈SampleApp_TaskID£¨À˘“‘œ˚œ¢ «∑¢Õ˘”¶”√≤„µƒ
   \   0000B3                ; Setup parameters for call to function osal_msg_send
   \   0000B3   90....       MOV     DPTR,#pMsg
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FA           MOV     R2,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FB           MOV     R3,A
   \   0000BB   90....       MOV     DPTR,#App_TaskID
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   12....       LCALL   ??osal_msg_send?relay
    222          
    223          /* deallocate the msg */
    224            osal_msg_deallocate ( (uint8 *)pMsg );      // Õ∑≈ƒ⁄¥Ê
   \   0000C3                ; Setup parameters for call to function osal_msg_deallocate
   \   0000C3   90....       MOV     DPTR,#pMsg
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   FA           MOV     R2,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FB           MOV     R3,A
   \   0000CB   12....       LCALL   ??osal_msg_deallocate?relay
    225            }
    226          }
   \                     ??MT_UartProcessZToolData_2:
   \   0000CE   7480         MOV     A,#-0x80
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D3   7F04         MOV     R7,#0x4
   \   0000D5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pMsg
   \   000004                REQUIRE ??Subroutine3_0
   \   000004                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartRegisterTaskID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartCalcFCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartProcessZToolData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    227          
    228          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    229          /***************************************************************************************************
    230           * @fn      MT_UartProcessZAppData
    231           *
    232           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    233           *          |  1  |  2   |       1         |  1   |
    234           *
    235           *          Parses the data and determine either is SPI or just simply serial data
    236           *          then send the data to correct place (MT or APP)
    237           *
    238           * @param   port    - UART port
    239           *          event   - Event that causes the callback
    240           *
    241           *
    242           * @return  None
    243           ***************************************************************************************************/
    244          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    245          {
    246          
    247            osal_event_hdr_t  *msg_ptr;
    248            uint16 length = 0;
    249            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    250          
    251            /*
    252               If maxZAppBufferLength is 0 or larger than current length
    253               the entire length of the current buffer is returned.
    254            */
    255            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    256            {
    257              length = MT_UartMaxZAppBufLen;
    258            }
    259            else
    260            {
    261              length = rxBufLen;
    262            }
    263          
    264            /* Verify events */
    265            if (event == HAL_UART_TX_FULL)
    266            {
    267              // Do something when TX if full
    268              return;
    269            }
    270          
    271            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    272            {
    273              if ( App_TaskID )
    274              {
    275                /*
    276                   If Application is ready to receive and there is something
    277                   in the Rx buffer then send it up
    278                */
    279                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    280                {
    281                  /* Disable App flow control until it processes the current data */
    282                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    283          
    284                  /* 2 more bytes are added, 1 for CMD type, other for length */
    285                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    286                  if ( msg_ptr )
    287                  {
    288                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    289                    msg_ptr->status = length;
    290          
    291                    /* Read the data of Rx buffer */
    292                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    293          
    294                    /* Send the raw data to application...or where ever */
    295                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    296                  }
    297                }
    298              }
    299            }
    300          }
    301          
    302          /***************************************************************************************************
    303           * @fn      SPIMgr_ZAppBufferLengthRegister
    304           *
    305           * @brief
    306           *
    307           * @param   maxLen - Max Length that the application wants at a time
    308           *
    309           * @return  None
    310           *
    311           ***************************************************************************************************/
    312          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    313          {
    314            /* If the maxLen is larger than the RX buff, something is not right */
    315            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    316              MT_UartMaxZAppBufLen = maxLen;
    317            else
    318              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    319          }
    320          
    321          /***************************************************************************************************
    322           * @fn      SPIMgr_AppFlowControl
    323           *
    324           * @brief
    325           *
    326           * @param   status - ready to send or not
    327           *
    328           * @return  None
    329           *
    330           ***************************************************************************************************/
    331          void MT_UartAppFlowControl ( bool status )
    332          {
    333          
    334            /* Make sure only update if needed */
    335            if (status != MT_UartZAppRxStatus )
    336            {
    337              MT_UartZAppRxStatus = status;
    338            }
    339          
    340            /* App is ready to read again, ProcessZAppData have to be triggered too */
    341            if (status == MT_UART_ZAPP_RX_READY)
    342            {
    343              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    344            }
    345          
    346          }
    347          
    348          #endif //ZAPP
    349          
    350          /***************************************************************************************************
    351          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     MT_UartCalcFCS               2      0      0
     MT_UartInit                  2      0     29
       -> HalUARTOpen             4      0     58
     MT_UartProcessZToolData      1      0    140
       -> HalUARTRead             0      0    280
       -> Hal_UART_RxBufLen       0      0    280
       -> osal_msg_allocate       0      0    280
       -> osal_msg_send           0      0    280
       -> osal_msg_deallocate     0      0    280
     MT_UartRegisterTaskID        2      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     App_TaskID                         1
     state                              1
     CMD_Token                          2
     LEN_Token                          1
     FSC_Token                          1
     pMsg                               2
     tempDataLen                        1
     MT_UartInit                      115
     ?Subroutine0                       7
     MT_UartRegisterTaskID             11
     MT_UartCalcFCS                    33
     MT_UartProcessZToolData          216
     ?Subroutine2                      14
     ?Subroutine1                       4
     ??Subroutine3_0                    9
     ??MT_UartInit?relay                6
     ??MT_UartRegisterTaskID?relay      6
     ??MT_UartCalcFCS?relay             6
     ??MT_UartProcessZToolData?relay    6

 
 409 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
 433 bytes of CODE  memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
