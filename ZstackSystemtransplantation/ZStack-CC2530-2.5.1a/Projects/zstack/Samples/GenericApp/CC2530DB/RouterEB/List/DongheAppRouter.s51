///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        06/Dec/2018  23:47:46 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\Sourc /
//                          e\DongheAppRouter.c                               /
//    Command line       =  -f C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg      /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg         /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\1314\Desktop\Zsta /
//                          ck系统移植\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\GenericApp\Source\DongheAppRouter.c -D     /
//                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D           /
//                          xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -lC          /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\RouterEB\List\ -lA C:\Users\1314\Desktop\Zsta /
//                          ck系统移植\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\GenericApp\CC2530DB\RouterEB\List\         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\RouterEB\Obj\ -e --no_code_motion --debug     /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\ -I C:\Users\1314\Desktop\Zstack系统移植\ZSta /
//                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericA /
//                          pp\CC2530DB\..\Source\ -I                         /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\ZMain\TI2530DB\ -I                   /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\hal\include\ -I     /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\hal\target\CC2530EB /
//                          \ -I C:\Users\1314\Desktop\Zstack系统移植\ZStack- /
//                          CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mac\include\   /
//                          -I C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\high_level\  /
//                          -I C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\low_level\sr /
//                          f04\ -I C:\Users\1314\Desktop\Zstack系统移植\ZSta /
//                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericA /
//                          pp\CC2530DB\..\..\..\..\..\Components\mac\low_lev /
//                          el\srf04\single_chip\ -I                          /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\mt\ -I              /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\osal\include\ -I    /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\services\saddr\ -I  /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\services\sdata\ -I  /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\af\ -I        /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\nwk\ -I       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sapi\ -I      /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sec\ -I       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\sys\ -I       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\zdo\ -I       /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\zmac\ -I            /
//                          C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz      /
//                          --require_prototypes                              /
//    List file          =  C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\RouterEB\List\DongheAppRouter.s51             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME DongheAppRouter

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??DhAppRouterManage_HandleKeys?relay
        FUNCTION ??DhAppRouterManage_HandleKeys?relay,0203H
        PUBLIC ??DhAppRouterManage_ProcessMSGData?relay
        FUNCTION ??DhAppRouterManage_ProcessMSGData?relay,0203H
        PUBLIC ??DhAppRouterManage_ProcessZDOStateChange?relay
        FUNCTION ??DhAppRouterManage_ProcessZDOStateChange?relay,0203H
        PUBLIC ??DongheAppRouter_Init?relay
        FUNCTION ??DongheAppRouter_Init?relay,0203H
        PUBLIC ??DongheAppRouter_ProcessEvent?relay
        FUNCTION ??DongheAppRouter_ProcessEvent?relay,0203H
        PUBLIC ??ReadAdcValue?relay
        FUNCTION ??ReadAdcValue?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??SampleApp_SerialCMD?relay
        FUNCTION ??SampleApp_SerialCMD?relay,0203H
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK APCFG
        PUBLIC DhAppRouterManage_HandleKeys
        FUNCTION DhAppRouterManage_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC DhAppRouterManage_NwkState
        PUBLIC DhAppRouterManage_ProcessMSGData
        FUNCTION DhAppRouterManage_ProcessMSGData,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC DhAppRouterManage_ProcessZDOStateChange
        FUNCTION DhAppRouterManage_ProcessZDOStateChange,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC DhAppRouterManage_TaskID
        PUBLIC DhAppRouterManage_TransID
        PUBLIC DongheAppRouter_Init
        FUNCTION DongheAppRouter_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC DongheAppRouter_ProcessEvent
        FUNCTION DongheAppRouter_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MySendtest_INClusterList
        PUBLIC MySendtest_OUTClusterList
        PUBLIC MySendtest_SimpleDesc
        PUBLIC MySendtest_Single_DstAddr
        PUBLIC MySendtest_epDesc
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBLIC ReadAdcValue
        FUNCTION ReadAdcValue,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleAppCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SerialCMD
        FUNCTION SampleApp_SerialCMD,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
HalLedBlink         SYMBOL "HalLedBlink"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_rand           SYMBOL "osal_rand"
HalLedSet           SYMBOL "HalLedSet"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
DhAppRouterManage_HandleKeys SYMBOL "DhAppRouterManage_HandleKeys"
??DhAppRouterManage_HandleKeys?relay SYMBOL "?relay", DhAppRouterManage_HandleKeys
DhAppRouterManage_ProcessMSGData SYMBOL "DhAppRouterManage_ProcessMSGData"
??DhAppRouterManage_ProcessMSGData?relay SYMBOL "?relay", DhAppRouterManage_ProcessMSGData
DhAppRouterManage_ProcessZDOStateChange SYMBOL "DhAppRouterManage_ProcessZDOStateChange"
??DhAppRouterManage_ProcessZDOStateChange?relay SYMBOL "?relay", DhAppRouterManage_ProcessZDOStateChange
DongheAppRouter_Init SYMBOL "DongheAppRouter_Init"
??DongheAppRouter_Init?relay SYMBOL "?relay", DongheAppRouter_Init
DongheAppRouter_ProcessEvent SYMBOL "DongheAppRouter_ProcessEvent"
??DongheAppRouter_ProcessEvent?relay SYMBOL "?relay", DongheAppRouter_ProcessEvent
ReadAdcValue        SYMBOL "ReadAdcValue"
??ReadAdcValue?relay SYMBOL "?relay", ReadAdcValue
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
SampleApp_SerialCMD SYMBOL "SampleApp_SerialCMD"
??SampleApp_SerialCMD?relay SYMBOL "?relay", SampleApp_SerialCMD

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// C:\Users\1314\Desktop\Zstack系统移植\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\Source\DongheAppRouter.c
//    1 
//    2 #include "DongheApp.h"
//    3 #include "OSAL_DongheRouter.h"
//    4 #include "hal_lcd.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr APCFG
APCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    5 #include "hal_led.h"
//    6 #include "hal_key.h"
//    7 #include "hal_uart.h"
//    8 #include "OnBoard.h"
//    9 #include "OSAL.h"
//   10 #include "AF.h"
//   11 #include "ZDApp.h"
//   12 #include "ZDObject.h"
//   13 #include "ZDProfile.h"
//   14 #include "DebugTrace.h"
//   15 #include "mt_uart.h"
//   16 #include "MT.h"
//   17 
//   18 
//   19 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   20 byte DhAppRouterManage_TaskID;   // Task ID for internal task/event processing
DhAppRouterManage_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   21                           // This variable will be received when
//   22                           // DhAppRouterManage_Init() is called.

        RSEG XDATA_I:XDATA:NOROOT(0)
//   23 devStates_t DhAppRouterManage_NwkState=DEV_INIT;   //devStates_t; //DEV_INIT
DhAppRouterManage_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for DhAppRouterManage_NwkState>`
        REQUIRE __INIT_XDATA_I
//   24 
//   25 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   26 byte DhAppRouterManage_TransID=0;  // This is the unique message ID (counter)
DhAppRouterManage_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   27 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   28 afAddrType_t MySendtest_Single_DstAddr;
MySendtest_Single_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   29 endPointDesc_t  MySendtest_epDesc;
MySendtest_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   30 uint8 *SampleAppPeriodicCounter = "ZZ";
SampleAppPeriodicCounter:
        DATA16
        DS 2
        REQUIRE `?<Initializer for SampleAppPeriodicCounter>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   31 uint8  SampleAppCounter=2;
SampleAppCounter:
        DATA8
        DS 1
        REQUIRE `?<Initializer for SampleAppCounter>`
        REQUIRE __INIT_XDATA_I
//   32 
//   33 
//   34 /*********************************************************************
//   35  * LOCAL FUNCTIONS
//   36  */
//   37 void DhAppRouterManage_ProcessZDOStateChange( void );
//   38 void DhAppRouterManage_ProcessMSGData( afIncomingMSGPacket_t *msg );
//   39 void DhAppRouterManage_HandleKeys(byte keys );
//   40 void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
//   41 void SampleApp_SendPeriodicMessage( void );
//   42 uint16 ReadAdcValue(uint8 ChannelNum,uint8 DecimationRate,uint8 RefVoltage);
//   43 
//   44 /*********************************************************************
//   45  * NETWORK LAYER CALLBACKS
//   46  */
//   47 
//   48 /*********************************************************************
//   49  * PUBLIC FUNCTIONS
//   50  */
//   51 
//   52 /*********************************************************************
//   53  * @fn      DhAppRouterManage_Init
//   54  *
//   55  * @brief   Initialization function for the Generic App Task.
//   56  *          This is called during initialization and should contain
//   57  *          any application specific initialization (ie. hardware
//   58  *          initialization/setup, table initialization, power up
//   59  *          notificaiton ... ).
//   60  *
//   61  * @param   task_id - the ID assigned by OSAL.  This ID should be
//   62  *                    used to send messages and set timers.
//   63  *
//   64  * @return  none
//   65  */
//   66 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   67 const uint16 MySendtest_INClusterList[MySendtest_MAX_OUTCLUSTERS]=
MySendtest_INClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
//   68 {
//   69   MySendtest_PERIODIC_CLUSTERID,
//   70   MySendtest_GUANG_CLUSTERID,
//   71   MySendtest_WENDU_CLUSTERID,
//   72   MySendtest_SHIDU_CLUSTERID
//   73 };
//   74 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   75 const uint16 MySendtest_OUTClusterList[MySendtest_MAX_INCLUSTERS]=
MySendtest_OUTClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
//   76 {
//   77   MySendtest_SINGLE_CLUSTERID,
//   78   MySendtest_REGUANG_CLUSTERID,
//   79   MySendtest_REWENDU_CLUSTERID,
//   80   MySendtest_RESHIDU_CLUSTERID
//   81 };
//   82 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   83 const SimpleDescriptionFormat_t MySendtest_SimpleDesc=
MySendtest_SimpleDesc:
        DB 16
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW MySendtest_INClusterList
        DATA8
        DB 4
        DATA16
        DW MySendtest_OUTClusterList
//   84 {
//   85   MySendtest_ENDPOINT,
//   86   MySendtest_PROFID,
//   87   MySendtest_DEVICEID,
//   88   MySendtest_DEVICE_VERSION,
//   89   MySendtest_FLAGS,
//   90   MySendtest_MAX_INCLUSTERS,
//   91   (uint16*)MySendtest_INClusterList,
//   92   MySendtest_MAX_OUTCLUSTERS,
//   93   (uint16*)MySendtest_OUTClusterList
//   94 };
//   95 
//   96 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   97 void DongheAppRouter_Init(uint8 task_id)
DongheAppRouter_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function DongheAppRouter_Init
        CODE
//   98 {
        FUNCALL DongheAppRouter_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   99   DhAppRouterManage_TaskID = task_id;
        MOV     DPTR,#DhAppRouterManage_TaskID
        MOVX    @DPTR,A
//  100   MySendtest_Single_DstAddr.addrMode=afAddr16Bit;
        MOV     DPTR,#MySendtest_Single_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  101   MySendtest_Single_DstAddr.endPoint=MySendtest_ENDPOINT;
        INC     DPTR
        MOV     A,#0x10
        MOVX    @DPTR,A
//  102   MySendtest_Single_DstAddr.addr.shortAddr=0x0000;
        MOV     DPTR,#MySendtest_Single_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  103 
//  104 
//  105   //DhAppRouterManage_TransID = 0;
//  106   MySendtest_epDesc.endPoint=MySendtest_ENDPOINT;
        MOV     DPTR,#MySendtest_epDesc
        MOV     A,#0x10
        MOVX    @DPTR,A
//  107   MySendtest_epDesc.task_id=&DhAppRouterManage_TaskID;
        INC     DPTR
        MOV     A,#DhAppRouterManage_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(DhAppRouterManage_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  108   MySendtest_epDesc.simpleDesc=(SimpleDescriptionFormat_t *)&MySendtest_SimpleDesc ;
        INC     DPTR
        MOV     A,#MySendtest_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(MySendtest_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  109   MySendtest_epDesc.latencyReq=noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  110 
//  111 
//  112   afRegister(&MySendtest_epDesc);
        ; Setup parameters for call to function afRegister
        MOV     R2,#MySendtest_epDesc & 0xff
        MOV     R3,#(MySendtest_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  113   RegisterForKeys(DhAppRouterManage_TaskID);
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#DhAppRouterManage_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  114 
//  115   MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  116   MT_UartRegisterTaskID(task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  117   HalUARTWrite(0,"Router\n",7);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Router\\n">` & 0xff
        MOV     R3,#(`?<Constant "Router\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  118 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  119 
//  120 /*********************************************************************
//  121  * @fn      DhAppRouterManage_ProcessEvent
//  122  *
//  123  * @brief   Generic Application Task event processor.  This function
//  124  *          is called to process all events for the task.  Events
//  125  *          include timers, messages and any other user defined events.
//  126  *
//  127  * @param   task_id  - The OSAL assigned task ID.
//  128  * @param   events - events to process.  This is a bit map and can
//  129  *                   contain more than one event.
//  130  *
//  131  * @return  none
//  132  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  133 uint16 DongheAppRouter_ProcessEvent( uint8 task_id, uint16 events )
DongheAppRouter_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function DongheAppRouter_ProcessEvent
        CODE
//  134 {
        FUNCALL DongheAppRouter_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, SampleApp_SerialCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, DhAppRouterManage_ProcessMSGData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, ReadAdcValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DongheAppRouter_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  135   afIncomingMSGPacket_t *MSGpkt;
//  136   unsigned char buff[8];
//  137   uint16 temp;
//  138   //afDataConfirm_t *afDataConfirm;
//  139 
//  140   // Data Confirmation message fields
//  141   //byte sentEP;
//  142   //ZStatus_t sentStatus;
//  143   //byte sentTransID;       // This should match the value sent
//  144   (void)task_id;  // Intentionally unreferenced parameter
//  145 
//  146   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??DongheAppRouter_ProcessEvent_0
//  147   {
//  148     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( DhAppRouterManage_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??DongheAppRouter_ProcessEvent_1
//  149     while ( MSGpkt )
//  150     {
//  151       switch ( MSGpkt->hdr.event )
//  152       {
//  153         case KEY_CHANGE:
//  154           DhAppRouterManage_HandleKeys(((keyChange_t *)MSGpkt)->keys );
//  155           break;
//  156 
//  157         case AF_INCOMING_MSG_CMD:
//  158           DhAppRouterManage_ProcessMSGData(MSGpkt);
//  159           break;
//  160 
//  161         case ZDO_STATE_CHANGE:
//  162           DhAppRouterManage_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  163           if (DhAppRouterManage_NwkState == DEV_ROUTER || DhAppRouterManage_NwkState == DEV_END_DEVICE)
//  164           {
//  165             APCFG = (0x1<<4);
//  166             HalLedBlink(HAL_LED_1,5,50,1000);
//  167             osal_start_timerEx( DhAppRouterManage_TaskID,MySendtest_DEVICEID,SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
//  168             //DhAppRouterManage_ProcessZDOStateChange();
//  169           }else{
//  170             //HalLedBlink(HAL_LED_2,5,50,1000);
//  171             //HalLedSet (HAL_LED_2, HAL_LED_MODE_ON);
//  172           }
//  173           break;
//  174 
//  175           case CMD_SERIAL_MSG:
//  176              SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
??DongheAppRouter_ProcessEvent_2:
        ; Setup parameters for call to function SampleApp_SerialCMD
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??SampleApp_SerialCMD?relay
//  177              break;
//  178 
//  179         default:
//  180           break;
//  181       }
//  182 
//  183       // Release the memory
//  184       osal_msg_deallocate( (uint8 *)MSGpkt );
??DongheAppRouter_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  185 
//  186       // Next
//  187       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( DhAppRouterManage_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??DongheAppRouter_ProcessEvent_1:
        MOV     DPTR,#DhAppRouterManage_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??DongheAppRouter_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        DEC     A
        JZ      ??DongheAppRouter_ProcessEvent_2
        ADD     A,#-0x19
        JZ      ??DongheAppRouter_ProcessEvent_5
        ADD     A,#0x49
        JZ      ??DongheAppRouter_ProcessEvent_6
        SJMP    ??DongheAppRouter_ProcessEvent_3
??DongheAppRouter_ProcessEvent_5:
        ; Setup parameters for call to function DhAppRouterManage_ProcessMSGData
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??DhAppRouterManage_ProcessMSGData?relay
        SJMP    ??DongheAppRouter_ProcessEvent_3
??DongheAppRouter_ProcessEvent_6:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#DhAppRouterManage_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x7
        JZ      ??DongheAppRouter_ProcessEvent_7
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??DongheAppRouter_ProcessEvent_3
??DongheAppRouter_ProcessEvent_7:
        MOV     0xf2,#0x10
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x32
        MOV     R2,#0x5
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#DhAppRouterManage_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??DongheAppRouter_ProcessEvent_3
//  188     }
//  189 
//  190     // return unprocessed events
//  191     return (events ^ SYS_EVENT_MSG);
??DongheAppRouter_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??DongheAppRouter_ProcessEvent_8 & 0xFFFF
//  192   }
//  193 
//  194   if(events && MySendtest_DEVICEID)
??DongheAppRouter_ProcessEvent_0:
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??DongheAppRouter_ProcessEvent_9 & 0xFFFF
//  195   {
//  196 
//  197     /*实现传感器采集
//  198     *并发送数据
//  199     */
//  200     APCFG = (0x1<<4);           //P0.4为ADC口采集压力传感器的电路信号
        MOV     0xf2,#0x10
//  201     temp = ReadAdcValue(0x4,3,2);//P0.1采集光照度，12bit,AVDD5作为参考
//  202     temp = (temp>>6);
//  203     buff[0] = (uint8)(temp&0xff);
        ; Setup parameters for call to function ReadAdcValue
        MOV     R3,#0x2
        MOV     R2,#0x3
        MOV     R1,#0x4
        LCALL   ??ReadAdcValue?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,#0x6
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  204     buff[1] = (buff[0]>>4)&0xf;
        SWAP    A
        ANL     A,#0xf
        MOV     R0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
//  205     buff[2] =  buff[0]&0xf;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,#0xf
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  206     if(buff[1] > 0x9)
        MOV     A,R0
        CLR     C
        SUBB    A,#0xa
        MOV     A,#0x1
        JC      ??DongheAppRouter_ProcessEvent_10
//  207         buff[1] = buff[1] - 0XA + 'A';
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x37
        SJMP    ??DongheAppRouter_ProcessEvent_11
//  208 	else
//  209 	    buff[1] = buff[1] + '0';
??DongheAppRouter_ProcessEvent_10:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x30
??DongheAppRouter_ProcessEvent_11:
        MOVX    @DPTR,A
//  210     if(buff[2] > 0x9)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xa
        MOVX    A,@DPTR
        JC      ??DongheAppRouter_ProcessEvent_12
//  211         buff[2] = buff[2] - 0XA + 'A';
        ADD     A,#0x37
        SJMP    ??DongheAppRouter_ProcessEvent_13
//  212 	else
//  213 	    buff[2] = buff[2] + '0';
??DongheAppRouter_ProcessEvent_12:
        ADD     A,#0x30
??DongheAppRouter_ProcessEvent_13:
        MOVX    @DPTR,A
//  214     SampleAppPeriodicCounter=&buff[1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPTR,#SampleAppPeriodicCounter
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  215     SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL   ??SampleApp_SendPeriodicMessage?relay
//  216     APCFG &= ~(0x1<<4);
        ANL     0xf2,#0xef
//  217 
//  218     osal_start_timerEx( DhAppRouterManage_TaskID, MySendtest_DEVICEID,
//  219         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x78
        MOV     R4,A
        CLR     A
        ADDC    A,#0x13
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#DhAppRouterManage_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  220 
//  221     return (events ^ MySendtest_DEVICEID);
        MOV     A,?V0 + 0
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??DongheAppRouter_ProcessEvent_8
//  222   }
//  223 
//  224   return 0;
??DongheAppRouter_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??DongheAppRouter_ProcessEvent_8:
        MOV     A,#0x8
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        REQUIRE APCFG
        ; // Fall through to label ?Subroutine0
//  225 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  226 
//  227 /*********************************************************************
//  228  * Event Generation Functions
//  229  */
//  230 
//  231 /*********************************************************************
//  232  * @fn      DhAppRouterManage_ProcessZDOMsgs()
//  233  *
//  234  * @brief   Process response messages
//  235  *
//  236  * @param   none
//  237  *
//  238  * @return  none
//  239  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  240 void DhAppRouterManage_ProcessZDOStateChange()
DhAppRouterManage_ProcessZDOStateChange:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function DhAppRouterManage_ProcessZDOStateChange
        CODE
//  241 {
        ; Saved register size: 0
        ; Auto size: 0
//  242 
//  243 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//  244 
//  245 /*********************************************************************
//  246  * @fn      DhAppRouterManage_HandleKeys
//  247  *
//  248  * @brief   Handles all key events for this device.
//  249  *
//  250  * @param   shift - true if in shift/alt.
//  251  * @param   keys - bit field for key events. Valid entries:
//  252  *                 HAL_KEY_SW_4
//  253  *                 HAL_KEY_SW_3
//  254  *                 HAL_KEY_SW_2
//  255  *                 HAL_KEY_SW_1
//  256  *
//  257  * @return  none
//  258  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  259 void DhAppRouterManage_HandleKeys(byte keys)
DhAppRouterManage_HandleKeys:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function DhAppRouterManage_HandleKeys
        CODE
//  260 {
        ; Saved register size: 0
        ; Auto size: 0
//  261 
//  262   // Shift is used to make each button/switch dual purpose.
//  263     if ( keys & HAL_KEY_SW_1 )
//  264     {
//  265     }
//  266 
//  267     if ( keys & HAL_KEY_SW_3 )
//  268     {
//  269     }
//  270 
//  271     if ( keys & HAL_KEY_SW_4 )
//  272     {
//  273     }
//  274     if ( keys & HAL_KEY_SW_5 )
//  275     {
//  276     }
//  277     if ( keys & HAL_KEY_SW_6 )
//  278     {
//  279     }
//  280 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
//  281 
//  282 /*********************************************************************
//  283  * LOCAL FUNCTIONS
//  284  */
//  285 
//  286 /*********************************************************************
//  287  * @fn      DhAppRouterManage_MessageMSGCB
//  288  *
//  289  * @brief   Data message processor callback.  This function processes
//  290  *          any incoming data - probably from other devices.  So, based
//  291  *          on cluster ID, perform the intended action.
//  292  *
//  293  * @param   none
//  294  *
//  295  * @return  none
//  296  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  297 void DhAppRouterManage_ProcessMSGData( afIncomingMSGPacket_t *msg )
DhAppRouterManage_ProcessMSGData:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function DhAppRouterManage_ProcessMSGData
        CODE
//  298 {      //MySendtest_PERIODIC_CLUSTERID
        FUNCALL DhAppRouterManage_ProcessMSGData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppRouterManage_ProcessMSGData, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppRouterManage_ProcessMSGData, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppRouterManage_ProcessMSGData, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DhAppRouterManage_ProcessMSGData, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  299   switch ( msg->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??DhAppRouterManage_ProcessMSGData_0
        INC     DPTR
        MOVX    A,@DPTR
??DhAppRouterManage_ProcessMSGData_0:
        JNZ     ??DhAppRouterManage_ProcessMSGData_1
//  300   {
//  301     case MySendtest_PERIODIC_CLUSTERID:
//  302       HalUARTWrite(0,msg->cmd.Data,msg->cmd.DataLength);
        MOV     A,R6
        ADD     A,#0x22
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  303       if(msg->cmd.Data[0]=='0')
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,#0x30
        JNZ     ??DhAppRouterManage_ProcessMSGData_2
//  304       {
//  305         HalLedSet (HAL_LED_1, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??DhAppRouterManage_ProcessMSGData_3:
        MOV     R1,#0x1
        SJMP    ??DhAppRouterManage_ProcessMSGData_4
//  306       }else if(msg->cmd.Data[0]=='1'){
??DhAppRouterManage_ProcessMSGData_2:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        XRL     A,#0x31
        JNZ     ??DhAppRouterManage_ProcessMSGData_5
//  307         HalLedSet (HAL_LED_1, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??DhAppRouterManage_ProcessMSGData_3
//  308       }else if(msg->cmd.Data[0]=='2'){
??DhAppRouterManage_ProcessMSGData_5:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        XRL     A,#0x32
        JNZ     ??DhAppRouterManage_ProcessMSGData_6
//  309         HalLedSet (HAL_LED_2, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        SJMP    ??DhAppRouterManage_ProcessMSGData_7
//  310       }else if(msg->cmd.Data[0]=='3'){
??DhAppRouterManage_ProcessMSGData_6:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        XRL     A,#0x33
        JNZ     ??DhAppRouterManage_ProcessMSGData_1
//  311         HalLedSet (HAL_LED_2, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??DhAppRouterManage_ProcessMSGData_7:
        MOV     R1,#0x2
??DhAppRouterManage_ProcessMSGData_4:
        LCALL   ??HalLedSet?relay
        CFI EndBlock cfiBlock5
//  312       }else{};
//  313       break;
//  314 
//  315     case MySendtest_WENDU_CLUSTERID:
//  316       break;
//  317 
//  318     case MySendtest_GUANG_CLUSTERID:
//  319       break;
//  320 
//  321     case MySendtest_SHIDU_CLUSTERID:
//  322       break;
//  323 
//  324     default:
//  325       break;
//  326 
//  327   }
//  328 }
??DhAppRouterManage_ProcessMSGData_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
//  329 
//  330 
//  331 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  333 {                  //MySendtest_REWENDU_CLUSTERID协调器的
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  334   if ( AF_DataRequest( &MySendtest_Single_DstAddr, &MySendtest_epDesc,
//  335                        MySendtest_REWENDU_CLUSTERID,
//  336                        SampleAppCounter,
//  337                        (uint8*)&SampleAppPeriodicCounter,
//  338                        &DhAppRouterManage_TransID,
//  339                        AF_DISCV_ROUTE,
//  340                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#DhAppRouterManage_TransID & 0xff
        MOV     ?V0 + 1,#(DhAppRouterManage_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
        MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPTR,#SampleAppCounter
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#MySendtest_epDesc & 0xff
        MOV     R5,#(MySendtest_epDesc >> 8) & 0xff
        MOV     R2,#MySendtest_Single_DstAddr & 0xff
        MOV     R3,#(MySendtest_Single_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  341   {
//  342   }
//  343   else
//  344   {
//  345     // Error occurred in request to send.
//  346   }
//  347 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock11
//  348 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  349 void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
SampleApp_SerialCMD:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function SampleApp_SerialCMD
        CODE
//  350 {
        FUNCALL SampleApp_SerialCMD, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SerialCMD, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  351     uint8 i,len,*str=NULL; //len 有用数据长度
//  352 /********************************************************************/
//  353   unsigned char seg7table[16] = {
//  354     /* 0       1       2       3       4       5       6      7*/
//  355     0xc0,   0xf9,   0xa4,   0xb0,   0x99,   0x92,   0x82,   0xf8,
//  356     /* 8       9      A        B       C       D       E      F*/
//  357     0x80,   0x90,   0x88,   0x83,   0xc6,   0xa1,   0x86,   0x8e };
        MOV     DPTR,#`?<Constant {192, 249, 164, 176, 153, 146, 130,`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {192, 249, 164, 176, 153, 146, 130,` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  358     //P0DIR
//  359   P0DIR |= 0x10;
        ORL     0xfd,#0x10
//  360   P1DIR = 0xff;
        MOV     0xfe,#-0x1
//  361   P0 |= (0x1<<4);
        SETB    0x80.4
//  362   /********************************************************************/
//  363 
//  364 
//  365     str=cmdMsg->msg; //指向数据开头
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  366     len=*str; //msg 里的第 1 个字节代表后面的数据长度
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R7,A
//  367 /********打印出串口接收到的数据，用于提示*********/
//  368     for(i=1;i<=len;i++)
        MOV     R6,#0x1
        SJMP    ??SampleApp_SerialCMD_0
//  369     {
//  370 
//  371        if('0'<=*(str+i)&&*(str+i)<='9')
//  372        {
//  373          P1=seg7table[*(str+i)-'0'];
//  374          HalUARTWrite(0,str+i,1 );
//  375          HalLedSet (HAL_LED_2, HAL_LED_MODE_OFF);
//  376          HalLedBlink(HAL_LED_1,5,50,1000);
//  377        }
//  378        else if('A'<=*(str+i)&&*(str+i)<='F' || 'a'<=*(str+i)&&*(str+i)<='f')
//  379        {
//  380          if('A'<=*(str+i)&&*(str+i)<='F')
//  381           P1=seg7table[*(str+i)-'A'+10];
//  382          else
//  383            P1=seg7table[*(str+i)-'a'+10];
//  384          HalUARTWrite(0,str+i,1 );
//  385          HalLedSet (HAL_LED_1, HAL_LED_MODE_OFF);
//  386          HalLedBlink(HAL_LED_2,5,50,1000);
//  387        }
//  388        else
//  389        {
//  390          HalUARTWrite(0,"error",5);
??SampleApp_SerialCMD_1:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "error">` & 0xff
        MOV     R3,#(`?<Constant "error">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  391          P1=0xFF;
        MOV     0x90,#-0x1
//  392        }
??SampleApp_SerialCMD_2:
        INC     R6
??SampleApp_SerialCMD_0:
        MOV     A,R7
        CLR     C
        SUBB    A,R6
        JC      ??SampleApp_SerialCMD_3
        MOV     ?V0 + 2,R6
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0x30
        CLR     C
        SUBB    A,#0xa
        JNC     ??SampleApp_SerialCMD_4
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        ADD     A,#-0x30
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     R1,#0x1
??SampleApp_SerialCMD_5:
        LCALL   ??HalLedBlink?relay
        SJMP    ??SampleApp_SerialCMD_2
??SampleApp_SerialCMD_4:
        MOVX    A,@DPTR
        ADD     A,#-0x41
        CLR     C
        SUBB    A,#0x6
        JC      ??SampleApp_SerialCMD_6
        MOVX    A,@DPTR
        ADD     A,#-0x61
        CLR     C
        SUBB    A,#0x6
        JNC     ??SampleApp_SerialCMD_1
??SampleApp_SerialCMD_6:
        MOVX    A,@DPTR
        ADD     A,#-0x41
        CLR     C
        SUBB    A,#0x6
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        JNC     ??SampleApp_SerialCMD_7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        ADD     A,#-0x37
        SJMP    ??SampleApp_SerialCMD_8
??SampleApp_SerialCMD_7:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        ADD     A,#-0x57
??SampleApp_SerialCMD_8:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ?Subroutine3 & 0xFFFF
//  393     }
??CrossCallReturnLabel_4:
        MOV     R1,#0x2
        SJMP    ??SampleApp_SerialCMD_5
//  394     //HalUARTWrite(0,"\n",1 );//换行
//  395 
//  396 
//  397     P0DIR &= ~(0x10);
??SampleApp_SerialCMD_3:
        ANL     0xfd,#0xef
//  398     P0 &= ~(0x1<<4);
        CLR     0x80.4
//  399 }
        MOV     A,#0x10
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock12
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE _A_P0
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0x90,A
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedBlink
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x32
        MOV     R2,#0x5
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
//  400 
//  401 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  402 uint16 ReadAdcValue(uint8 ChannelNum,uint8 DecimationRate,uint8 RefVoltage)
ReadAdcValue:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function ReadAdcValue
        CODE
//  403 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  404   uint16 AdValue;
//  405   if(ChannelNum == 0xe){//片内温度到ADC_SOC
        MOV     A,#0xe
        XRL     A,R1
        MOV     DPTR,#0x624b
        JNZ     ??ReadAdcValue_0
//  406     TR0 = 1;
        MOV     A,#0x1
        SJMP    ??ReadAdcValue_1
//  407     ATEST = 1;
//  408   }
//  409   else{
//  410     TR0 = 0;
??ReadAdcValue_0:
        CLR     A
??ReadAdcValue_1:
        MOVX    @DPTR,A
//  411     ATEST = 0;
        MOV     DPTR,#0x61bd
        MOVX    @DPTR,A
//  412   }
//  413 
//  414   ADCCON3 = ChannelNum&0xf;
        MOV     A,#0xf
        ANL     A,R1
        MOV     0xb6,A
//  415   ADCCON3 = ADCCON3 | ((DecimationRate&0x3)<<4);
        MOV     A,#0x3
        ANL     A,R4
        SWAP    A
        ORL     0xb6,A
//  416   ADCCON3 = ADCCON3 | ((RefVoltage&0x3)<<6);
        MOV     A,R5
        SWAP    A
        RLC     A
        RLC     A
        ANL     A,#0xc0
        ORL     0xb6,A
//  417   ADCCON1 = ADCCON1 | (0x3<<4);//ADCCON1.ST = 1时启动
        ORL     0xb4,#0x30
//  418   AdValue = ADCL; //清除EOC
        MOV     A,0xba
//  419   AdValue = ADCH;
        MOV     A,0xbb
//  420   ADCCON1 = ADCCON1 | (0x1<<6);//启动转换
        ORL     0xb4,#0x40
//  421   while(!(ADCCON1&0x80));
??ReadAdcValue_2:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??ReadAdcValue_2
//  422   AdValue = ADCH;
        MOV     A,0xbb
        MOV     ?V0 + 0,A
//  423   AdValue = (AdValue<<6) + (ADCL>>2);
        MOV     A,0xba
        MOV     R2,A
//  424   ADCCON1 =  ADCCON1 & 0x7f;
        ANL     0xb4,#0x7f
//  425   return AdValue;
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,R2
        RRC     A
        RRC     A
        ANL     A,#0x3f
        MOV     R2,A
        MOV     A,?V0 + 0
        ADD     A,R2
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock29
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
//  426 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for DhAppRouterManage_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SampleAppPeriodicCounter>`:
        DATA16
        DW `?<Constant "ZZ">`

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SampleAppCounter>`:
        DATA8
        DB 2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DongheAppRouter_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DongheAppRouter_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DongheAppRouter_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DongheAppRouter_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DhAppRouterManage_ProcessZDOStateChange?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DhAppRouterManage_ProcessZDOStateChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DhAppRouterManage_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DhAppRouterManage_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DhAppRouterManage_ProcessMSGData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DhAppRouterManage_ProcessMSGData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SerialCMD?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SerialCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadAdcValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadAdcValue

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZZ">`:
        DB "ZZ"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Router\\n">`:
        DB "Router\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {192, 249, 164, 176, 153, 146, 130,`:
        DB 192
        DB 249
        DB 164
        DB 176
        DB 153
        DB 146
        DB 130
        DB 248
        DB 128
        DB 144
        DB 136
        DB 131
        DB 198
        DB 161
        DB 134
        DB 142

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "error">`:
        DB "error"

        END
// 
// 1 023 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     9 bytes in segment SFR_AN
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//    61 bytes in segment XDATA_ROM_C
//    20 bytes in segment XDATA_Z
// 
// 1 075 bytes of CODE  memory
//    61 bytes of CONST memory
//     0 bytes of DATA  memory (+ 9 bytes shared)
//    24 bytes of XDATA memory
//
//Errors: none
//Warnings: none
